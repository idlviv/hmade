{"version":3,"sources":["webpack:///./src/app/components/social/comment/comment.component.html","webpack:///./src/app/components/social/comment/comment.component.scss","webpack:///./src/app/components/social/comment/comment.component.ts","webpack:///./src/app/components/social/comments-list/comments-list.component.html","webpack:///./src/app/components/social/comments-list/comments-list.component.scss","webpack:///./src/app/components/social/comments-list/comments-list.component.ts","webpack:///./src/app/components/social/comments/comments.component.html","webpack:///./src/app/components/social/comments/comments.component.scss","webpack:///./src/app/components/social/comments/comments.component.ts","webpack:///./src/app/components/social/social-routing.module.ts","webpack:///./src/app/components/social/social.component.html","webpack:///./src/app/components/social/social.component.scss","webpack:///./src/app/components/social/social.component.ts","webpack:///./src/app/components/social/social.module.ts","webpack:///./src/app/components/social/unreaded-comments/unreaded-comments.component.html","webpack:///./src/app/components/social/unreaded-comments/unreaded-comments.component.scss","webpack:///./src/app/components/social/unreaded-comments/unreaded-comments.component.ts"],"names":[],"mappings":"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","file":"components-dashboard-dashboard-module~components-mcs-mcs-module~components-social-social-module.js","sourcesContent":["module.exports = \"<!-- <mat-card class=\\\"comments\\\"> -->\\n  <div class=\\\"row\\\" [ngClass]=\\\"{'muted-strong': !comment.display}\\\"\\n    fxLayout=\\\"row\\\">\\n    <div class=\\\"cell\\\" fxFlex=\\\"10\\\" fxLayoutAlign=\\\"center center\\\">\\n      <img *ngIf=\\\"comment.user && comment.user.avatar\\\" class=\\\"responsive-image\\\" src=\\\"{{comment.user.role === 'google' ? \\n            comment.user.avatar :\\n            config.imgPath +\\n            config.cloudinary.cloud_name +\\n            '/c_fill,w_50,h_50,f_auto/' +\\n            comment.user.avatar}}\\\" alt=\\\"avatar\\\">\\n      <img *ngIf=\\\"!comment.user\\\" class=\\\"responsive-image\\\" src=\\\"{{\\n            config.imgPath +\\n            config.cloudinary.cloud_name +\\n            '/c_fill,w_50,h_50,f_auto/' +\\n            config.defaultAvatar}}\\\" alt=\\\"avatar\\\">\\n    </div>\\n    <div class=\\\"cell\\\" fxFlex=\\\"80\\\">\\n      <p>\\n        <span class=\\\"mat-body-2 bold\\\">\\n          {{comment.user && comment.user.login ? comment.user.name + ' ' + comment.user.surname : 'Гість'}}\\n        </span>\\n        <span fxFlex></span>\\n        <span class=\\\"mat-body-1\\\">{{comment.commentedAt | date: 'dd.MM.yyyy HH:mm'}}</span>\\n      </p>\\n      <p class=\\\"text-align-justify\\\">{{comment.comment}}</p>\\n    </div>\\n    <div class=\\\"cell\\\" fxFlex=\\\"10\\\">\\n      <p *ngIf=\\\"allowTo('manager')\\\"><button class=\\\"mat-icon-button\\\" (click)=\\\"deleteComment(comment)\\\"\\n          aria-label=\\\"Delete comment\\\">\\n          <mat-icon class=\\\"mat-18\\\">delete_outline</mat-icon>\\n        </button></p>\\n      <p *ngIf=\\\"allowTo('manager') && !comment.display\\\">\\n        <button class=\\\"mat-icon-button\\\" (click)=\\\"displayComment(true, comment._id)\\\" aria-label=\\\"Display comment\\\">\\n          <mat-icon class=\\\"mat-18\\\">play_circle_outline</mat-icon>\\n        </button>\\n      </p>\\n      <p *ngIf=\\\"allowTo('manager') && comment.display\\\">\\n        <button class=\\\"mat-icon-button\\\" (click)=\\\"displayComment(false, comment._id)\\\" aria-label=\\\"Hide comment\\\">\\n          <mat-icon class=\\\"mat-18\\\">pause_circle_outline</mat-icon>\\n        </button>\\n      </p>\\n\\n    </div>\\n  </div>\\n<!-- </mat-card> -->\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { IComment } from 'src/app/interfaces/interface';\nimport { UserService } from 'src/app/services/user.service';\nimport { config } from '../../../app.config';\n\n@Component({\n  selector: 'app-comment',\n  templateUrl: './comment.component.html',\n  styleUrls: ['./comment.component.scss']\n})\nexport class CommentComponent implements OnInit {\n  @Input() comment: IComment;\n  @Output() deleteCommentEmitter = new EventEmitter<IComment>();\n  @Output() displayCommentEmitter = new EventEmitter<any>();\n\n  config = config;\n\n  constructor(\n    private userService: UserService,\n  ) { }\n\n  ngOnInit() {\n  }\n\n  deleteComment(comment: IComment): void {\n    this.deleteCommentEmitter.emit(comment);\n  }\n\n  displayComment(display: boolean, comment_id: string) {\n    this.displayCommentEmitter.emit({display, comment_id});\n  }\n\n  allowTo(permitedRole: string): boolean {\n    // this.user = this.userService.userCookieExtractor();\n    return this.userService.allowTo(permitedRole);\n  }\n\n  restrictTo(restrictedRoles: string[]): boolean {\n    // this.user = this.userService.userCookieExtractor();\n    return this.userService.restrictTo(restrictedRoles);\n  }\n}\n","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"app-container-h\\\">\\n    <div class=\\\"row\\\" fxLayout=\\\"row\\\">\\n      <div *ngIf=\\\"comments\\\" class=\\\"cell\\\">\\n        <p class=\\\"mat-body-1\\\">Показано<span class=\\\"mat-body-2\\\"> {{comments.length}}\\n          </span>коментарів з<span class=\\\"mat-body-2\\\"> {{commentsTotalLength || 0}}</span></p>\\n      </div>\\n    </div>\\n    <mat-card class=\\\"comments\\\">\\n      <app-comment class=\\\"comment\\\" [comment]=\\\"comment\\\" (deleteCommentEmitter)=\\\"deleteComment($event)\\\"\\n        (displayCommentEmitter)=\\\"displayComment($event)\\\" *ngFor=\\\"let comment of comments\\\"></app-comment>\\n    </mat-card>\\n    <div *ngIf=\\\"processing\\\" class=\\\"row\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\n      <div class=\\\"cell\\\" fxFlex=\\\"100\\\">\\n        <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Input, HostListener } from '@angular/core';\nimport { of } from 'rxjs';\nimport { SocialService } from 'src/app/services/social.service';\nimport { mergeMap } from 'rxjs/operators';\nimport { IConfirmPopupData, IComment } from 'src/app/interfaces/interface';\nimport { MatDialog } from '@angular/material';\nimport { ConfirmPopupComponent } from '../../shared/confirm-popup/confirm-popup.component';\nimport { SharedService } from 'src/app/services/shared.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { IUser } from 'src/app/interfaces/user-interface';\n\n@Component({\n  selector: 'app-comments-list',\n  templateUrl: './comments-list.component.html',\n  styleUrls: ['./comments-list.component.scss']\n})\nexport class CommentsListComponent implements OnInit {\n  comments = <IComment[]>[];\n  commentsTotalLength: number;\n  @Input() parent_id: string;\n  @Input() parentCategory: string;\n  processing = false;\n  user: IUser;\n\n  constructor(\n    private userService: UserService,\n    private socialService: SocialService,\n    public dialog: MatDialog,\n    private sharedService: SharedService,\n  ) { }\n\n  ngOnInit() {\n    this.sharedService.getEventToReloadComments()\n      .pipe(\n        mergeMap(result => {\n          console.log('result', result);\n          if (result) {\n            const { sort, skip, limit, displayFilter } = result;\n            this.loadComments(sort, skip, limit, displayFilter);\n            return this.socialService.getComments(this.parent_id, this.parentCategory, sort, skip, limit, displayFilter);\n          } else {\n            // not neded to reload, do nothing\n            return of({ comments: [], commentsTotalLength: 0 });\n          }\n        }\n        )\n      )\n      .subscribe(result => {\n        if (result.comments.length) {\n          this.comments = result.comments;\n          this.commentsTotalLength = result.commentsTotalLength;\n        }\n      },\n        err => console.log('add comment err', err)\n      );\n\n    this.loadComments(-1, 0, 5, !this.allowTo('manager'));\n  }\n\n  // Listening of page bottom reached\n  @HostListener('window:scroll', ['$event'])\n  onScroll(event): void {\n    if ((window.innerHeight + pageYOffset) >= document.body.offsetHeight - 2) {\n      if (\n        !this.processing &&\n        this.commentsTotalLength !== this.comments.length &&\n        this.commentsTotalLength\n      ) {\n        this.loadComments(-1, this.comments.length, 5, !this.allowTo('manager'));\n      }\n    }\n  }\n\n  loadComments(sort: number, skip: number, limit: number, displayFilter: boolean) {\n    this.processing = true;\n    this.socialService.getComments(this.parent_id, this.parentCategory, sort, skip, limit, displayFilter)\n      .subscribe(result => {\n        this.comments.push(...result.comments);\n        this.commentsTotalLength = result.commentsTotalLength;\n        this.processing = false;\n\n      });\n  }\n\n\n  deleteComment(event): void {\n    const comment = event.comment;\n    const confirmObject = <IConfirmPopupData>{\n      message: `Дійсно видалити коментар: ${comment.comment} ?`,\n      payload: { _id: comment._id }\n    };\n\n    const dialogRef = this.dialog.open(ConfirmPopupComponent, {\n      data: confirmObject,\n      // panelClass: 'custom-dialog-container'\n    });\n\n    dialogRef.afterClosed()\n      .subscribe(res => {\n        if (res && res.choise) {\n          this.socialService.deleteComment(this.parent_id, this.parentCategory, res.payload._id)\n            .pipe(\n              mergeMap(result => {\n                if (result) {\n                  // successfuly delete\n                  this.sharedService.sharingEventToReloadComments();\n                  // this.sharedService.sharingEvent(['userChangeStatusEmitter']);\n                  return this.socialService.getComments(\n                    this.parent_id, this.parentCategory, -1, 0, this.comments.length, !this.allowTo('manager')\n                  );\n                } else {\n                  // not delete, do nothing\n                  return of(null);\n                }\n              }\n              )\n            )\n            .subscribe(result => {\n              if (result) {\n                this.comments = result.comments;\n                this.commentsTotalLength = result.commentsTotalLength;\n              }\n            },\n              err => console.log('add comment err', err)\n            );\n        }\n      },\n        err => console.log('err delete', err)\n      );\n  }\n\n  displayComment(event) {\n    const display = event.display;\n    const comment_id = event.comment_id;\n    this.socialService.displayComment(this.parent_id, this.parentCategory, display, comment_id)\n      .pipe(\n        mergeMap(result => {\n          if (result) {\n            // successfuly updated\n            this.sharedService.sharingEventToReloadComments();\n            // this.sharedService.sharingEvent(['userChangeStatusEmitter']);\n            return this.socialService.getComments(\n              this.parent_id, this.parentCategory, -1, 0, this.comments.length, !this.allowTo('manager')\n            );\n          } else {\n            // not added, do nothing\n            return of({ comments: [], commentsTotalLength: 0 });\n          }\n        }\n        )\n      )\n      .subscribe(result => {\n        if (result.comments.length) {\n          this.comments = result.comments;\n          this.commentsTotalLength = result.commentsTotalLength;\n        }\n      },\n        err => console.log('add comment err', err)\n      );\n  }\n\n  allowTo(permitedRole: string): boolean {\n    this.user = this.userService.userCookieExtractor();\n    return this.userService.allowTo(permitedRole);\n  }\n\n  restrictTo(restrictedRoles: string[]): boolean {\n    this.user = this.userService.userCookieExtractor();\n    return this.userService.restrictTo(restrictedRoles);\n  }\n}\n","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"app-container-h\\\">\\r\\n        <mat-card>\\r\\n            <form [formGroup]=\\\"commentForm\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n                <div class=\\\"row\\\" fxLayout=\\\"row\\\">\\r\\n                  <div class=\\\"cell\\\" fxFlex=\\\"10\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n\\r\\n                    <img *ngIf=\\\"allowTo('guest')\\\" class=\\\"responsive-image\\\"\\r\\n                      src=\\\"{{user.role === 'google' ? \\r\\n                        user.avatar :\\r\\n                        config.imgPath +\\r\\n                        config.cloudinary.cloud_name +\\r\\n                        '/c_fill,w_50,h_50,f_auto/' +\\r\\n                        user.avatar}}\\\" alt=\\\"avatar\\\">\\r\\n                    <img *ngIf=\\\"!user\\\" class=\\\"responsive-image\\\"\\r\\n                      src=\\\"{{\\r\\n                        config.imgPath +\\r\\n                        config.cloudinary.cloud_name +\\r\\n                        '/c_fill,w_50,h_50,f_auto/' +\\r\\n                        config.defaultAvatar}}\\\" alt=\\\"avatar\\\">\\r\\n\\r\\n                  </div>\\r\\n                    <mat-form-field class=\\\"cell\\\" fxFlex=\\\"80\\\">\\r\\n                      <textarea matInput\\r\\n                        [placeholder]=\\\"allowTo('user') ?\\r\\n                          'Коментар' :\\r\\n                          allowTo('guest') ?\\r\\n                            'Для відправки коментарів верифікуйте пошту' :\\r\\n                            'Коментарі можуть залишати лише зареєстровані користувачі'\\\"\\r\\n                        formControlName=\\\"comment\\\" required>\\r\\n                      </textarea>\\r\\n                      <mat-error\\r\\n                        *ngIf=\\\"(commentForm.get('comment').errors?.minlength ||\\r\\n                        commentForm.get('comment').errors?.maxlength ||\\r\\n                        commentForm.get('comment').errors?.required) &&\\r\\n                        commentForm.get('comment').touched\\\">\\r\\n                        Довжина повинна бути від 3 до 200 символів\\r\\n                      </mat-error>\\r\\n                      <mat-error\\r\\n                        *ngIf=\\\"commentForm.get('comment').errors?.pattern &&\\r\\n                        commentForm.get('comment').touched\\\">\\r\\n                        Не використовуйте спеціальні символи\\r\\n                      </mat-error>\\r\\n                    </mat-form-field>\\r\\n                  <div class=\\\"cell\\\" fxFlex=\\\"10\\\">\\r\\n                    <button mat-icon-button (click)=\\\"sendComment()\\\" aria-label=\\\"Send\\\"\\r\\n                     [disabled]=\\\"!commentForm.valid || !allowTo('user')\\\">\\r\\n                      <mat-icon>send</mat-icon>\\r\\n                    </button>\\r\\n           \\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"row\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end\\\">\\r\\n                  <re-captcha [ngClass]=\\\"{'display-none': !commentForm.get('comment').valid}\\\"\\r\\n                    [formControlName]=\\\"'recaptcha'\\\" #recaptchaRef\\r\\n                    siteKey=\\\"{{config.recaptchaSiteKey}}\\\">\\r\\n                  </re-captcha> \\r\\n                </div>\\r\\n              </form>\\r\\n        </mat-card>\\r\\n    <!-- </div> -->\\r\\n\\r\\n    \\r\\n    <!-- <div class=\\\"row\\\" fxLayout=\\\"row\\\">\\r\\n      <div *ngIf=\\\"comments\\\" class=\\\"cell\\\">\\r\\n        <p class=\\\"mat-body-1\\\">Показано<span class=\\\"mat-body-2\\\"> {{comments.length}} \\r\\n        </span>коментарів з<span class=\\\"mat-body-2\\\"> {{commentsTotalLength || 0}}</span></p>\\r\\n      </div>\\r\\n    </div>\\r\\n    <mat-card class=\\\"comments\\\">\\r\\n      <app-comment class=\\\"comment\\\" [comment]=\\\"comment\\\" \\r\\n      (deleteCommentEmitter)=\\\"deleteComment($event)\\\" (displayCommentEmitter)=\\\"displayComment($event)\\\"\\r\\n      *ngFor=\\\"let comment of comments\\\"></app-comment>\\r\\n    </mat-card> -->\\r\\n\\r\\n    <!-- <mat-card class=\\\"comments\\\">\\r\\n          <div class=\\\"row comment\\\" [ngClass]=\\\"{'muted-strong': !comment.display}\\\"\\r\\n     *ngFor=\\\"let comment of comments\\\" fxLayout=\\\"row\\\">\\r\\n      <div  class=\\\"cell\\\" fxFlex=\\\"10\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n                <img *ngIf=\\\"comment.user && comment.user.avatar\\\" class=\\\"responsive-image\\\"\\r\\n                  src=\\\"{{comment.user.role === 'google' ? \\r\\n                    comment.user.avatar :\\r\\n                    config.imgPath +\\r\\n                    config.cloudinary.cloud_name +\\r\\n                    '/c_fill,w_50,h_50,f_auto/' +\\r\\n                    comment.user.avatar}}\\\" alt=\\\"avatar\\\">\\r\\n                <img *ngIf=\\\"!comment.user\\\" class=\\\"responsive-image\\\"\\r\\n                  src=\\\"{{\\r\\n                    config.imgPath +\\r\\n                    config.cloudinary.cloud_name +\\r\\n                    '/c_fill,w_50,h_50,f_auto/' +\\r\\n                    config.defaultAvatar}}\\\" alt=\\\"avatar\\\">\\r\\n      </div>\\r\\n      <div class=\\\"cell\\\" fxFlex=\\\"80\\\">\\r\\n        <p>\\r\\n          <span class=\\\"mat-body-2 bold\\\">\\r\\n            {{comment.user && comment.user.login ? comment.user.name + ' ' + comment.user.surname : 'Гість'}}\\r\\n          </span>\\r\\n          <span fxFlex></span>\\r\\n          <span class=\\\"mat-body-1\\\">{{comment.commentedAt | date: 'dd.MM.yyyy HH:mm'}}</span>\\r\\n        </p>\\r\\n        <p class=\\\"text-align-justify\\\">{{comment.comment}}</p>\\r\\n      </div>\\r\\n      <div class=\\\"cell\\\" fxFlex=\\\"10\\\">\\r\\n        <p *ngIf=\\\"allowTo('manager')\\\"><button class=\\\"mat-icon-button\\\" (click)=\\\"deleteComment(comment)\\\" aria-label=\\\"Delete comment\\\">\\r\\n          <mat-icon class=\\\"mat-18\\\">delete_outline</mat-icon></button></p>\\r\\n        <p *ngIf=\\\"allowTo('manager') && !comment.display\\\">\\r\\n          <button class=\\\"mat-icon-button\\\" (click)=\\\"displayComment(true, comment._id)\\\" aria-label=\\\"Display comment\\\">\\r\\n            <mat-icon class=\\\"mat-18\\\">play_circle_outline</mat-icon></button>\\r\\n        </p>\\r\\n        <p *ngIf=\\\"allowTo('manager') && comment.display\\\">\\r\\n          <button class=\\\"mat-icon-button\\\" (click)=\\\"displayComment(false, comment._id)\\\" aria-label=\\\"Hide comment\\\">\\r\\n            <mat-icon class=\\\"mat-18\\\">pause_circle_outline</mat-icon></button>\\r\\n        </p>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  </mat-card> -->\\r\\n\\r\\n    <!-- <div *ngIf=\\\"processing\\\" class=\\\"row\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n      <div class=\\\"cell\\\" fxFlex=\\\"100\\\">\\r\\n        <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\r\\n      </div>\\r\\n    </div> -->\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, OnInit, Input, ViewChild, HostListener } from '@angular/core';\r\nimport { IComment, IConfirmPopupData, IConfirmPopupChoise } from 'src/app/interfaces/interface';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { IUser } from 'src/app/interfaces/user-interface';\r\nimport { config } from '../../../app.config';\r\nimport { FormGroup, FormControl, Validators, FormGroupDirective } from '@angular/forms';\r\nimport { of } from 'rxjs';\r\nimport { SocialService } from 'src/app/services/social.service';\r\nimport { mergeMap } from 'rxjs/operators';\r\n// import { MatDialog } from '@angular/material';\r\n// import { ConfirmPopupComponent } from '../../shared/confirm-popup/confirm-popup.component';\r\nimport { SharedService } from '../../../services/shared.service';\r\n\r\n@Component({\r\n  selector: 'app-comments',\r\n  templateUrl: './comments.component.html',\r\n  styleUrls: ['./comments.component.scss']\r\n})\r\n\r\nexport class CommentsComponent implements OnInit {\r\n  config = config;\r\n  user: IUser;\r\n  comments = <IComment[]>[];\r\n  commentsTotalLength: number;\r\n  @Input() parent_id: string;\r\n  @Input() parentCategory: string;\r\n\r\n  commentForm: FormGroup;\r\n  @ViewChild('f') mcFormDirective: FormGroupDirective;\r\n  @ViewChild('recaptchaRef') recaptchaRef;\r\n\r\n  // processing = false;\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private socialService: SocialService,\r\n    // public dialog: MatDialog,\r\n    private sharedService: SharedService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.commentForm = new FormGroup({\r\n      comment: new FormControl(\r\n        {\r\n          value: '',\r\n          disabled: !this.allowTo('user')\r\n        },\r\n        [\r\n          Validators.required,\r\n          Validators.pattern('[a-zA-Z0-9а-яА-ЯіїєІЇЄ,.\"@%-_\\' ]+'),\r\n          Validators.minLength(3),\r\n          Validators.maxLength(150),\r\n        ]),\r\n        recaptcha: new FormControl('', [\r\n          Validators.required\r\n        ])\r\n    });\r\n\r\n    // this.loadComments(-1, 0, 5, !this.allowTo('manager'));\r\n  }\r\n\r\n  // // Listening of page bottom reached\r\n  // @HostListener('window:scroll', ['$event'])\r\n  // onScroll(event): void {\r\n  //   if ((window.innerHeight + pageYOffset) >= document.body.offsetHeight - 2) {\r\n  //     if (\r\n  //       !this.processing &&\r\n  //       this.commentsTotalLength !== this.comments.length &&\r\n  //       this.commentsTotalLength\r\n  //       ) {\r\n  //       this.loadComments(-1, this.comments.length, 5, !this.allowTo('manager'));\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // loadComments(sort: number, skip: number, limit: number, displayFilter: boolean) {\r\n  //   this.processing = true;\r\n  //   this.socialService.getComments(this.parent_id, this.parentCategory, sort, skip, limit, displayFilter)\r\n  //     .subscribe(result => {\r\n  //       this.comments.push(...result.comments);\r\n  //       this.commentsTotalLength = result.commentsTotalLength;\r\n  //       this.processing = false;\r\n\r\n  //     });\r\n  // }\r\n\r\n  sendComment() {\r\n    const comment = this.commentForm.get('comment').value;\r\n    const recaptcha = this.commentForm.get('recaptcha').value;\r\n\r\n    this.socialService.addComment(this.parent_id, this.parentCategory, comment, recaptcha)\r\n      .subscribe(result => {\r\n          this.mcFormDirective.resetForm();\r\n          this.sharedService.sharingEventToReloadComments({\r\n            sort: -1,\r\n            skip: 0,\r\n            limit: 5,\r\n            displayFilter: !this.allowTo('manager'),\r\n          });\r\n      },\r\n      err => console.log('add comment err', err)\r\n    );\r\n\r\n    // this.socialService.addComment(this.parent_id, this.parentCategory, comment, recaptcha)\r\n    //   .pipe(\r\n    //     mergeMap(result => {\r\n    //       if (result) {\r\n    //         // successfuly added\r\n    //         this.mcFormDirective.resetForm();\r\n    //         this.sharedService.sharingEventToReloadComments();\r\n    //         return this.socialService.getComments(this.parent_id, this.parentCategory, -1, 0, 5, !this.allowTo('manager'));\r\n    //       } else {\r\n    //         // not added, do nothing\r\n    //         return of({comments: [], commentsTotalLength: 0});\r\n    //       }\r\n    //     }\r\n    //     )\r\n    //   )\r\n    //   .subscribe(result => {\r\n    //     if (result.comments.length) {\r\n    //       this.comments = result.comments;\r\n    //       this.commentsTotalLength = result.commentsTotalLength;\r\n    //     }\r\n    //   },\r\n    //     err => console.log('add comment err', err)\r\n    //   );\r\n  }\r\n\r\n  // deleteComment(event): void {\r\n  //   const comment = event.comment;\r\n  //   const confirmObject = <IConfirmPopupData>{\r\n  //     message: `Дійсно видалити коментар: ${comment.comment} ?`,\r\n  //     payload: {_id: comment._id}\r\n  //   };\r\n\r\n  //   const dialogRef = this.dialog.open(ConfirmPopupComponent, {\r\n  //     data: confirmObject,\r\n  //     // panelClass: 'custom-dialog-container'\r\n  //   });\r\n\r\n  //   dialogRef.afterClosed()\r\n  //     .subscribe(res => {\r\n  //         if (res && res.choise) {\r\n  //           this.socialService.deleteComment(this.parent_id, this.parentCategory, res.payload._id)\r\n  //             .pipe(\r\n  //               mergeMap(result => {\r\n  //                 if (result) {\r\n  //                   // successfuly delete\r\n  //                   this.sharedService.sharingEventToReloadComments();\r\n  //                   // this.sharedService.sharingEvent(['userChangeStatusEmitter']);\r\n  //                   return this.socialService.getComments(\r\n  //                     this.parent_id, this.parentCategory, -1, 0, this.comments.length, !this.allowTo('manager')\r\n  //                     );\r\n  //                 } else {\r\n  //                   // not delete, do nothing\r\n  //                   return of(null);\r\n  //                 }\r\n  //               }\r\n  //               )\r\n  //             )\r\n  //             .subscribe(result => {\r\n  //               if (result) {\r\n  //                 this.comments = result.comments;\r\n  //                 this.commentsTotalLength = result.commentsTotalLength;\r\n  //               }\r\n  //             },\r\n  //               err => console.log('add comment err', err)\r\n  //             );\r\n  //         }\r\n  //       },\r\n  //       err => console.log('err delete', err)\r\n  //     );\r\n  // }\r\n\r\n  // displayComment(event) {\r\n  //   const display = event.display;\r\n  //   const comment_id = event.comment_id;\r\n  //   this.socialService.displayComment(this.parent_id, this.parentCategory, display, comment_id)\r\n  //     .pipe(\r\n  //       mergeMap(result => {\r\n  //         if (result) {\r\n  //           // successfuly updated\r\n  //           this.sharedService.sharingEventToReloadComments();\r\n  //           // this.sharedService.sharingEvent(['userChangeStatusEmitter']);\r\n  //           return this.socialService.getComments(\r\n  //             this.parent_id, this.parentCategory, -1, 0, this.comments.length, !this.allowTo('manager')\r\n  //             );\r\n  //         } else {\r\n  //           // not added, do nothing\r\n  //           return of({comments: [], commentsTotalLength: 0});\r\n  //         }\r\n  //       }\r\n  //       )\r\n  //     )\r\n  //     .subscribe(result => {\r\n  //       if (result.comments.length) {\r\n  //         this.comments = result.comments;\r\n  //         this.commentsTotalLength = result.commentsTotalLength;\r\n  //       }\r\n  //     },\r\n  //       err => console.log('add comment err', err)\r\n  //     );\r\n  // }\r\n\r\n  allowTo(permitedRole: string): boolean {\r\n    this.user = this.userService.userCookieExtractor();\r\n    return this.userService.allowTo(permitedRole);\r\n  }\r\n\r\n  restrictTo(restrictedRoles: string[]): boolean {\r\n    this.user = this.userService.userCookieExtractor();\r\n    return this.userService.restrictTo(restrictedRoles);\r\n  }\r\n}\r\n","import { Routes, RouterModule } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\nimport { SocialComponent } from './social.component';\r\nimport { AuthGuard } from 'src/app/guards/auth.guard';\r\nimport { UnreadedCommentsComponent } from './unreaded-comments/unreaded-comments.component';\r\n\r\nconst socialRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SocialComponent,\r\n    children: [\r\n      {\r\n        path: 'unreaded-comments',\r\n        component: UnreadedCommentsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { auth: 'user' },\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(socialRoutes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class SocialRoutingModule {}\r\n","module.exports = \"<div id=\\\"mcs\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"app-container-h app-container-v\\\">\\r\\n      <div class=\\\"container\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-social',\r\n  templateUrl: './social.component.html',\r\n  styleUrls: ['./social.component.scss']\r\n})\r\nexport class SocialComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MaterialModule } from '../../material.module';\r\nimport { RecaptchaFormsModule } from 'ng-recaptcha/forms';\r\nimport { RecaptchaModule } from 'ng-recaptcha';\r\nimport { UnreadedCommentsComponent } from './unreaded-comments/unreaded-comments.component';\r\nimport { SocialRoutingModule } from './social-routing.module';\r\nimport { SocialComponent } from './social.component';\r\nimport { CommentsComponent } from './comments/comments.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { CommentComponent } from './comment/comment.component';\r\nimport { CommentsListComponent } from './comments-list/comments-list.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MaterialModule,\r\n    SocialRoutingModule,\r\n    SharedModule,\r\n    RecaptchaFormsModule,\r\n    RecaptchaModule\r\n  ],\r\n  declarations: [\r\n    UnreadedCommentsComponent,\r\n    SocialComponent,\r\n    CommentsComponent,\r\n    CommentComponent,\r\n    CommentsListComponent,\r\n  ],\r\n  exports: [\r\n    CommentsComponent,\r\n    CommentsListComponent,\r\n  ]\r\n})\r\nexport class SocialModule { }\r\n","module.exports = \"<div class=\\\"row\\\" FxLayout=\\\"row\\\">\\r\\n  <div *ngFor=\\\"let unreadedComment of unreadedComments\\\" class=\\\"cell\\\" fxFlex=\\\"100\\\">\\r\\n    {{unreadedComment | json}}\\r\\n  </div>\\r\\n</div>\\r\\n     \"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { IUser } from 'src/app/interfaces/user-interface';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { SocialService } from 'src/app/services/social.service';\r\n\r\n@Component({\r\n  selector: 'app-unreaded-comments',\r\n  templateUrl: './unreaded-comments.component.html',\r\n  styleUrls: ['./unreaded-comments.component.scss']\r\n})\r\nexport class UnreadedCommentsComponent implements OnInit {\r\n  user: IUser;\r\n  unreadedComments: any[];\r\n  \r\n  constructor(\r\n    private userService: UserService,\r\n    private socialService: SocialService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n      if (this.allowTo('user')) {\r\n        this.socialService.getUnreadedComments()\r\n          .subscribe(\r\n            result => this.unreadedComments = result,\r\n            err => console.log('err', err)\r\n          );\r\n      }\r\n    }\r\n\r\n  allowTo(permitedRole: string): boolean {\r\n    this.user = this.userService.userCookieExtractor();\r\n    return this.userService.allowTo(permitedRole);\r\n  }\r\n}\r\n"],"sourceRoot":""}