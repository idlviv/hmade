{"version":3,"sources":["webpack:///./src/app/components/user/redirection-with-token/redirection-with-token.component.html","webpack:///./src/app/components/user/redirection-with-token/redirection-with-token.component.scss","webpack:///./src/app/components/user/redirection-with-token/redirection-with-token.component.ts","webpack:///./src/app/components/user/user-create/user-create.component.html","webpack:///./src/app/components/user/user-create/user-create.component.scss","webpack:///./src/app/components/user/user-create/user-create.component.ts","webpack:///./src/app/components/user/user-dialog/user-dialog.component.html","webpack:///./src/app/components/user/user-dialog/user-dialog.component.scss","webpack:///./src/app/components/user/user-dialog/user-dialog.component.ts","webpack:///./src/app/components/user/user-login/user-login.component.html","webpack:///./src/app/components/user/user-login/user-login.component.scss","webpack:///./src/app/components/user/user-login/user-login.component.ts","webpack:///./src/app/components/user/user-password-reset/user-password-reset.component.html","webpack:///./src/app/components/user/user-password-reset/user-password-reset.component.scss","webpack:///./src/app/components/user/user-password-reset/user-password-reset.component.ts","webpack:///./src/app/components/user/user-profile/user-profile.component.html","webpack:///./src/app/components/user/user-profile/user-profile.component.scss","webpack:///./src/app/components/user/user-profile/user-profile.component.ts","webpack:///./src/app/components/user/user-routing.module.ts","webpack:///./src/app/components/user/user.component.html","webpack:///./src/app/components/user/user.component.scss","webpack:///./src/app/components/user/user.component.ts","webpack:///./src/app/components/user/user.module.ts"],"names":[],"mappings":"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","file":"components-dashboard-dashboard-module~components-user-user-module.js","sourcesContent":["module.exports = \"<div class=\\\"row\\\" fxLayout=\\\"row\\\">\\r\\n  <div class=\\\"cell\\\" fxFlex=\\\"100\\\">\\r\\n  <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { MatSnackBar } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-redirection-with-token',\r\n  templateUrl: './redirection-with-token.component.html',\r\n  styleUrls: ['./redirection-with-token.component.scss']\r\n})\r\nexport class RedirectionWithTokenComponent implements OnInit {\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private userService: UserService,\r\n    private matSnackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.route.params\r\n      .subscribe(\r\n        (params) => {\r\n          // const token = params.token;\r\n          this.userService.logging();\r\n          this.router.navigate(['/user', 'profile']);\r\n        },\r\n      (err) => console.log('err', err)\r\n      );\r\n  }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"container\\\">\\r\\n\\r\\n<div class=\\\"row\\\" fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\">\\r\\n  <div fxFlex.gt-xs=\\\"20\\\" fxFlex.gt-md=\\\"30\\\"></div>\\r\\n\\r\\n  <div class=\\\"cell\\\" fxFlex.gt-xs=\\\"60\\\" fxFlex.gt-md=\\\"40\\\">\\r\\n  <!--<div class=\\\"cell\\\" fxFlex.gt-xs=\\\"60\\\" fxFlex.gt-md=\\\"40\\\" fxFlexOffset.gt-xs=\\\"20\\\" fxFlexOffset.gt-md=\\\"30\\\">-->\\r\\n\\r\\n  <div class=\\\"centered-container\\\">\\r\\n    <mat-card class=\\\"form-block\\\">\\r\\n      <mat-card-content>\\r\\n        <div class=\\\"padding-bottom\\\" fxLayout fxLayoutAlign=\\\"center center\\\">\\r\\n          <img class=\\\"responsive-image\\\" src=\\\"./assets/images/hmade_logo_dark.svg\\\" width=\\\"367px\\\" alt=\\\"HandMADE\\\">\\r\\n        </div>\\r\\n\\r\\n        <form [formGroup]=\\\"userCreateForm\\\" (submit)=\\\"onUserCreateSubmit()\\\">\\r\\n          <div fxLayout=\\\"row\\\">\\r\\n            <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n              <mat-icon color=\\\"primary\\\">account_box</mat-icon>\\r\\n            </div>\\r\\n            <mat-form-field>\\r\\n              <input matInput placeholder=\\\"Логін\\\" formControlName=\\\"login\\\" required>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"(userCreateForm.get('login').errors?.minlength ||\\r\\n                      userCreateForm.get('login').errors?.maxlength ||\\r\\n                      userCreateForm.get('login').errors?.required) &&\\r\\n                      userCreateForm.get('login').touched\\\">\\r\\n                Довжина повинна бути від 4 до 15 символів\\r\\n              </mat-error>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"userCreateForm.get('login').errors?.pattern &&\\r\\n                     userCreateForm.get('login').touched\\\">\\r\\n                Використовуйте тільки латинські символи і цифри\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div fxLayout=\\\"row\\\">\\r\\n            <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n              <mat-icon color=\\\"primary\\\">account_circle</mat-icon>\\r\\n            </div>\\r\\n            <mat-form-field>\\r\\n              <input matInput placeholder=\\\"Ім'я\\\" formControlName=\\\"name\\\" required>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"(userCreateForm.get('name').errors?.minlength ||\\r\\n                      userCreateForm.get('name').errors?.maxlength ||\\r\\n                      userCreateForm.get('name').errors?.required) &&\\r\\n                      userCreateForm.get('name').touched\\\">\\r\\n                Довжина повинна бути від 2 до 20 символів\\r\\n              </mat-error>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"userCreateForm.get('name').errors?.pattern &&\\r\\n                     userCreateForm.get('name').touched\\\">\\r\\n                Використовуйте тільки букви і цифри\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div fxLayout=\\\"row\\\">\\r\\n            <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n              <mat-icon color=\\\"primary\\\">supervised_user_circle</mat-icon>\\r\\n            </div>\\r\\n            <mat-form-field>\\r\\n              <input matInput placeholder=\\\"Прізвище\\\" formControlName=\\\"surname\\\" required>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"(userCreateForm.get('surname').errors?.minlength ||\\r\\n                      userCreateForm.get('surname').errors?.maxlength ||\\r\\n                      userCreateForm.get('surname').errors?.required) &&\\r\\n                      userCreateForm.get('surname').touched\\\">\\r\\n                Довжина повинна бути від 2 до 20 символів\\r\\n              </mat-error>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"userCreateForm.get('surname').errors?.pattern &&\\r\\n                     userCreateForm.get('surname').touched\\\">\\r\\n                Використовуйте тільки букви і цифри\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div fxLayout=\\\"row\\\">\\r\\n            <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n              <mat-icon color=\\\"primary\\\">lock_outline</mat-icon>\\r\\n            </div>\\r\\n            <mat-form-field>\\r\\n              <input matInput placeholder=\\\"Пароль\\\" formControlName=\\\"password\\\"\\r\\n                     required [type]=\\\"hidePassword ? 'password' : 'text'\\\">\\r\\n              <mat-icon color=\\\"accent\\\" matSuffix (click)=\\\"hidePassword = !hidePassword\\\">\\r\\n                {{hidePassword ? 'visibility' : 'visibility_off'}}</mat-icon>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"(userCreateForm.get('password').errors?.minlength ||\\r\\n                          userCreateForm.get('password').errors?.maxlength ||\\r\\n                          userCreateForm.get('password').errors?.required) &&\\r\\n                          userCreateForm.get('password').touched\\\">\\r\\n                Довжина повинна бути від 6 до 15 символів\\r\\n              </mat-error>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"userCreateForm.get('password').errors?.pattern &&\\r\\n                         userCreateForm.get('password').touched\\\">\\r\\n                Використовуйте тільки латинські символи та цифри\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div fxLayout=\\\"row\\\">\\r\\n            <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n              <!--<mat-icon color=\\\"primary\\\">lock</mat-icon>-->\\r\\n            </div>\\r\\n            <mat-form-field>\\r\\n              <input matInput placeholder=\\\"Підтвердіть пароль\\\" formControlName=\\\"passwordConfirm\\\"\\r\\n                     required [type]=\\\"hidePassword ? 'password' : 'text'\\\">\\r\\n\\r\\n              <mat-icon *ngIf=\\\"!userCreateForm.get('passwordConfirm').errors?.mismatch && !userCreateForm.get('password').errors\\\"\\r\\n               matSuffix color=\\\"accent\\\">verified_user</mat-icon>\\r\\n\\r\\n              <mat-error\\r\\n                *ngIf=\\\"userCreateForm.get('passwordConfirm').errors?.mismatch &&\\r\\n                      userCreateForm.get('passwordConfirm').touched\\\">\\r\\n                Пароль не збігається\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n\\r\\n          <div fxLayout=\\\"row\\\">\\r\\n            <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n              <mat-icon color=\\\"primary\\\">mail_outline</mat-icon>\\r\\n            </div>\\r\\n            <mat-form-field>\\r\\n              <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" type=\\\"email\\\" required>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"(userCreateForm.get('email').errors?.minlength ||\\r\\n                        userCreateForm.get('email').errors?.maxlength ||\\r\\n                        userCreateForm.get('email').errors?.required) &&\\r\\n                        userCreateForm.get('email').touched\\\">\\r\\n                Довжина повинна бути від 5 до 30 символів\\r\\n              </mat-error>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"userCreateForm.get('email').errors?.pattern &&\\r\\n                       userCreateForm.get('email').touched\\\">\\r\\n                Введіть правільну адресу\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <re-captcha [ngClass]=\\\"{'display-none':\\r\\n          !userCreateForm.get('email').valid || !userCreateForm.get('login').valid ||\\r\\n          !userCreateForm.get('password').valid || !userCreateForm.get('passwordConfirm').valid}\\\"\\r\\n                      [formControlName]=\\\"'recaptcha'\\\" #recaptchaRef\\r\\n                      siteKey=\\\"{{config.recaptchaSiteKey}}\\\">\\r\\n          </re-captcha>\\r\\n\\r\\n          <div class=\\\"submit-button-wrapper\\\">\\r\\n            <span fxFlex></span>\\r\\n            <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"!userCreateForm.valid\\\" aria-label=\\\"Register\\\">Зареєструватись</button>\\r\\n          </div>\\r\\n\\r\\n        </form>\\r\\n      </mat-card-content>\\r\\n    </mat-card>\\r\\n  </div>\\r\\n\\r\\n\\r\\n  </div>\\r\\n</div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormControl, FormGroup, FormGroupDirective, Validators } from '@angular/forms';\r\nimport { ValidateService } from '../../../services/validate.service';\r\nimport { IUser } from '../../../interfaces/user-interface';\r\nimport { UserService } from '../../../services/user.service';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { Router } from '@angular/router';\r\nimport { config } from '../../../app.config';\r\nimport {RecaptchaComponent} from 'ng-recaptcha';\r\n\r\n@Component({\r\n  selector: 'app-user-create',\r\n  templateUrl: './user-create.component.html',\r\n  styleUrls: ['./user-create.component.scss']\r\n})\r\n\r\nexport class UserCreateComponent implements OnInit {\r\n  config = config;\r\n  userCreateForm: FormGroup;\r\n  hidePassword = true;\r\n  user: IUser;\r\n\r\n  /**\r\n   * directive for reset form (invalid status)\r\n   */\r\n  @ViewChild(FormGroupDirective) userCreateFormDirective: FormGroupDirective;\r\n  @ViewChild(RecaptchaComponent) recaptchaRef: RecaptchaComponent;\r\n\r\n  constructor(\r\n    private validateService: ValidateService,\r\n    private userService: UserService,\r\n    private matSnackBar: MatSnackBar,\r\n    private router: Router,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const emailPattern = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\n\r\n    this.userCreateForm = new FormGroup({\r\n        login: new FormControl('', [\r\n          Validators.required,\r\n          Validators.minLength(4),\r\n          Validators.maxLength(15),\r\n          Validators.pattern('[a-zA-Z0-9]+'),\r\n        ]),\r\n        password: new FormControl('', [\r\n          Validators.required,\r\n          Validators.minLength(6),\r\n          Validators.maxLength(15),\r\n          Validators.pattern('[a-zA-Z0-9]+'),\r\n        ]),\r\n        passwordConfirm: new FormControl('', [\r\n          Validators.required,\r\n        ]),\r\n        email: new FormControl('', [\r\n          Validators.required,\r\n          Validators.minLength(5),\r\n          Validators.maxLength(30),\r\n          Validators.pattern(emailPattern),\r\n        ]),\r\n        name: new FormControl('', [\r\n          Validators.required,\r\n          Validators.minLength(2),\r\n          Validators.maxLength(20),\r\n          Validators.pattern('[a-zA-Z0-9а-яА-ЯіїєІЇЄ\\' ]+'),\r\n        ]),\r\n        surname: new FormControl('', [\r\n          Validators.required,\r\n          Validators.minLength(2),\r\n          Validators.maxLength(20),\r\n          Validators.pattern('[a-zA-Z0-9а-яА-ЯіїєІЇЄ\\' ]+'),\r\n        ]),\r\n        recaptcha: new FormControl('', [\r\n          Validators.required\r\n        ])\r\n      },\r\n      this.validateService.matchPassword\r\n    );\r\n  }\r\n\r\n  onUserCreateSubmit() {\r\n    this.user = <IUser>{\r\n      login: this.userCreateForm.get('login').value,\r\n      password: this.userCreateForm.get('password').value,\r\n      email: this.userCreateForm.get('email').value,\r\n      name: this.userCreateForm.get('name').value,\r\n      surname: this.userCreateForm.get('surname').value\r\n    };\r\n    // create user\r\n    this.userService.userCreate(this.user,  this.userCreateForm.get('recaptcha').value)\r\n      .subscribe(\r\n        result => {\r\n          const token = result;\r\n          this.resetForm();\r\n          this.matSnackBar.open('Користувача створено, вхід виконано', '', {duration: 3000});\r\n          // login new user\r\n          this.userService.logging();\r\n          this.router.navigate(['/user', 'profile']);\r\n        },\r\n        err => {\r\n          // 422 or 400\r\n          this.recaptchaRef.reset();\r\n          this.matSnackBar.open(err.error.message || 'Сталася полка', '',\r\n            {duration: 3000, panelClass: 'snack-bar-danger'});\r\n        }\r\n      );\r\n  }\r\n\r\n\r\n  onUserCreateReset() {\r\n    this.resetForm();\r\n    // MAKE redirect\r\n  }\r\n\r\n  resetForm() {\r\n    if (this.userCreateFormDirective) {\r\n      this.userCreateFormDirective.resetForm();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","module.exports = \"<h1 mat-dialog-title>Внести зміни</h1>\\r\\n<div class=\\\"form-block\\\">\\r\\n    <form [formGroup]=\\\"userEditForm\\\" (submit)=\\\"onSubmit()\\\">\\r\\n\\r\\n      <div fxLayout=\\\"row\\\" *ngFor=\\\"let dataPayload of data.payload\\\">\\r\\n        <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n          <mat-icon color=\\\"primary\\\">{{dataPayload.icon}}</mat-icon>\\r\\n        </div>\\r\\n        <mat-form-field>\\r\\n            <input matInput placeholder=\\\"{{dataPayload.label}}\\\" formControlName=\\\"{{dataPayload.name}}\\\"\\r\\n                   autocomplete=\\\"false\\\" type=\\\"{{dataPayload.type}}\\\" required>\\r\\n            <mat-error *ngFor=\\\"let validator of dataPayload.validators\\\">\\r\\n              <div\\r\\n                *ngIf=\\\"(validator.name === 'length' &&\\r\\n                (userEditForm.get(dataPayload.name).errors?.minlength ||\\r\\n                userEditForm.get(dataPayload.name).errors?.maxlength ||\\r\\n                userEditForm.get(dataPayload.name).errors?.required) &&\\r\\n                userEditForm.get(dataPayload.name).touched)\\\">\\r\\n                {{validator.message}}\\r\\n              </div>\\r\\n              <div\\r\\n                *ngIf=\\\"(validator.name === 'pattern' &&\\r\\n                userEditForm.get(dataPayload.name).errors?.pattern &&\\r\\n                userEditForm.get(dataPayload.name).touched)\\\">\\r\\n                {{validator.message}}\\r\\n              </div>\\r\\n              <div\\r\\n                *ngIf=\\\"(validator.name === 'require' &&\\r\\n                userEditForm.get(dataPayload.name).errors?.required &&\\r\\n                userEditForm.get(dataPayload.name).touched)\\\">\\r\\n                {{validator.message}}\\r\\n              </div>\\r\\n              <div\\r\\n                *ngIf=\\\"(validator.name === 'match' &&\\r\\n                userEditForm.get(dataPayload.name).errors?.mismatch &&\\r\\n                userEditForm.get(dataPayload.name).touched)\\\">\\r\\n                {{validator.message}}\\r\\n              </div>\\r\\n            </mat-error>\\r\\n          </mat-form-field>\\r\\n\\r\\n      </div>\\r\\n      <div class=\\\"submit-button-wrapper\\\">\\r\\n        <button type=\\\"reset\\\" mat-button color=\\\"primary\\\" (click)=\\\"onNoClick()\\\" aria-label=\\\"Back\\\">Повернутись</button>\\r\\n        <span fxFlex></span>\\r\\n        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"!userEditForm.valid\\\" aria-label=\\\"Ok\\\">Ok</button>\\r\\n      </div>\\r\\n\\r\\n    </form>\\r\\n<p *ngIf=\\\"data.oldValue\\\" class=\\\"mat-body-1\\\">поточне значення: <span class=\\\"mat-body-2\\\">{{data.oldValue}}</span></p>\\r\\n\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-user-dialog',\r\n  templateUrl: './user-dialog.component.html',\r\n  styleUrls: ['./user-dialog.component.scss']\r\n})\r\nexport class UserDialogComponent implements OnInit {\r\n  userEditForm: FormGroup;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<UserDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n  ngOnInit() {\r\n    this.userEditForm = this.data.initForm();\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onSubmit() {\r\n    this.dialogRef.close({\r\n      // request: [\r\n      //   {\r\n      //     [this.data.payload[0].name]: this.userEditForm.get(this.data.payload[0].name).value\r\n      //   }\r\n      // ],\r\n      name: this.data.payload[0].name,\r\n      value: this.userEditForm.get(this.data.payload[0].name).value,\r\n      password: this.data.payload[0].name === 'password' ?\r\n        this.userEditForm.get(this.data.payload[2].name).value :\r\n        this.userEditForm.get(this.data.payload[1].name).value\r\n    });\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"container\\\">\\r\\n\\r\\n<div class=\\\"row\\\" fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\">\\r\\n  <div fxFlex.gt-xs=\\\"20\\\" fxFlex.gt-md=\\\"30\\\"></div>\\r\\n\\r\\n  <div class=\\\"cell\\\" fxFlex.gt-xs=\\\"60\\\" fxFlex.gt-md=\\\"40\\\">\\r\\n    <!--<div class=\\\"cell\\\" fxFlex.gt-xs=\\\"60\\\" fxFlex.gt-md=\\\"40\\\" fxFlexOffset.gt-xs=\\\"20\\\" fxFlexOffset.gt-md=\\\"30\\\">-->\\r\\n\\r\\n  <div class=\\\"centered-container\\\">\\r\\n    <mat-card  class=\\\"form-block\\\">\\r\\n      <mat-card-content>\\r\\n        <div class=\\\"padding-bottom\\\" fxLayout fxLayoutAlign=\\\"center center\\\">\\r\\n          <img class=\\\"responsive-image\\\" src=\\\"./assets/images/hmade_logo_dark.svg\\\" width=\\\"367px\\\" alt=\\\"HandMADE\\\">\\r\\n        </div>\\r\\n        <form [formGroup]=\\\"userLoginForm\\\" (submit)=\\\"onUserLoginSubmit()\\\">\\r\\n\\r\\n          <div fxLayout=\\\"row\\\">\\r\\n            <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n              <mat-icon color=\\\"primary\\\">account_circle</mat-icon>\\r\\n            </div>\\r\\n            <mat-form-field>\\r\\n              <input matInput placeholder=\\\"Логін\\\" formControlName=\\\"login\\\" required>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"userLoginForm.get('login').errors?.required &&\\r\\n                      userLoginForm.get('login').touched\\\">\\r\\n                      Введіть логін\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div fxLayout=\\\"row\\\">\\r\\n            <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n              <mat-icon color=\\\"primary\\\">lock_outline</mat-icon>\\r\\n            </div>\\r\\n            <mat-form-field>\\r\\n              <input matInput placeholder=\\\"Пароль\\\" formControlName=\\\"password\\\"\\r\\n                     required [type]=\\\"hidePassword ? 'password' : 'text'\\\">\\r\\n              <mat-icon class=\\\"muted\\\" matSuffix (click)=\\\"hidePassword = !hidePassword\\\">\\r\\n                {{hidePassword ? 'visibility' : 'visibility_off'}}</mat-icon>\\r\\n              <mat-error\\r\\n                *ngIf=\\\"userLoginForm.get('password').errors?.required &&\\r\\n                          userLoginForm.get('password').touched\\\">\\r\\n                Введіть пароль\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <!-- <div class=\\\"submit-button-wrapper\\\">\\r\\n            <button mat-raised-button class=\\\"full-width\\\" color=\\\"primary\\\" [disabled]=\\\"!userLoginForm.valid\\\">Увійти</button>       \\r\\n          </div> -->\\r\\n\\r\\n          <div class=\\\"links-wrapper\\\" fxLayoutAlign=\\\"center\\\">\\r\\n            <button class=\\\"google-button full-width\\\" mat-raised-button color=\\\"primary\\\" aria-label=\\\"Login\\\"\\r\\n            [disabled]=\\\"!userLoginForm.valid\\\">Увійти</button>       \\r\\n          </div>\\r\\n          <div fxLayout=\\\"row\\\" class=\\\"links-wrapper\\\">\\r\\n              <a [routerLink]=\\\"['/user/create']\\\">Зареєструватись</a>\\r\\n              <span fxFlex></span>\\r\\n              <a [routerLink]=\\\"['/user/password-reset']\\\">Забули пароль</a>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"links-wrapper\\\" fxLayoutAlign=\\\"center\\\">\\r\\n            <!-- <button mat-stroked-button type=\\\"button\\\" (click)=\\\"userGoogleLogin()\\\">\\r\\n                <i class=\\\"fab fa-google\\\"></i> Signin with google\\r\\n            </button> -->\\r\\n            <!-- <a mat-stroked-button href=\\\"http://localhost:8081/api/user/auth/google\\\">\\r\\n              <i class=\\\"fab fa-google\\\"></i> Signin with google\\r\\n            </a> -->\\r\\n            <a class=\\\"google-button\\\" mat-raised-button href=\\\"{{config.host}}/api/user/auth/google\\\" aria-label=\\\"Sign in with Google\\\">\\r\\n                <svg version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"18px\\\" height=\\\"18px\\\" viewBox=\\\"0 0 48 48\\\">\\r\\n                  <g>\\r\\n                    <path fill=\\\"#EA4335\\\" d=\\\"M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z\\\"></path>\\r\\n                    <path fill=\\\"#4285F4\\\" d=\\\"M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z\\\"></path>\\r\\n                    <path fill=\\\"#FBBC05\\\" d=\\\"M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z\\\"></path>\\r\\n                    <path fill=\\\"#34A853\\\" d=\\\"M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z\\\"></path>\\r\\n                    <path fill=\\\"none\\\" d=\\\"M0 0h48v48H0z\\\"></path>\\r\\n                  </g>\\r\\n                </svg>\\r\\n              Sign in with Google</a>\\r\\n          </div>\\r\\n\\r\\n         \\r\\n   \\r\\n        </form>\\r\\n      </mat-card-content>\\r\\n      <!--<img mat-card-image class=\\\"mat-card-image-bottom\\\" src=\\\"./assets/images/logo400x140-2.jpg\\\" alt=\\\"\\\">-->\\r\\n    </mat-card>\\r\\n  </div>\\r\\n\\r\\n\\r\\n  </div>\\r\\n</div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup, FormGroupDirective, Validators } from '@angular/forms';\r\nimport { IUser } from '../../../interfaces/user-interface';\r\nimport { UserService } from '../../../services/user.service';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { Router } from '@angular/router';\r\nimport { config } from '../../../app.config';\r\nimport { SharedService } from 'src/app/services/shared.service';\r\ndeclare const gapi: any;\r\n\r\n@Component({\r\n  selector: 'app-user-login',\r\n  templateUrl: './user-login.component.html',\r\n  styleUrls: ['./user-login.component.scss']\r\n})\r\nexport class UserLoginComponent implements OnInit {\r\n  config = config;\r\n  userLoginForm: FormGroup;\r\n  user: IUser;\r\n  hidePassword = true;\r\n\r\n  /**\r\n   * directive for reset form (invalid status)\r\n   */\r\n  @ViewChild(FormGroupDirective) userCreateFormDirective: FormGroupDirective;\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private sharedService: SharedService,\r\n    private matSnackBar: MatSnackBar,\r\n    private router: Router,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.userLoginForm = new FormGroup({\r\n        login: new FormControl('', [\r\n          Validators.required,\r\n        ]),\r\n        password: new FormControl('', [\r\n          Validators.required,\r\n        ]),\r\n      },\r\n    );\r\n  }\r\n\r\n  onUserLoginSubmit() {\r\n    this.user = <IUser>{\r\n      login: this.userLoginForm.get('login').value,\r\n      password: this.userLoginForm.get('password').value,\r\n    };\r\n\r\n    this.userService.userLogin(this.user)\r\n      .subscribe(\r\n        result => {\r\n          if (result === 'logged in') {\r\n            this.resetForm();\r\n            this.userService.logging();\r\n            this.sharedService.sharingEventToReloadComments();\r\n\r\n            // this.sharedService.sharingEvent(['userChangeStatusEmitter']);\r\n            this.matSnackBar.open(`${this.user.login}, ви увійшли на сайт`, '', {duration: 5000});\r\n            this.router.navigate(['/user', 'profile']);\r\n          }\r\n        },\r\n        err => {\r\n          this.matSnackBar.open(err.error.message || 'Сталася помилка', '',\r\n            {duration: 5000, panelClass: 'snack-bar-danger'});\r\n        }\r\n      );\r\n  }\r\n\r\n  resetForm() {\r\n    if (this.userCreateFormDirective) {\r\n      this.userCreateFormDirective.resetForm();\r\n    }\r\n  }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"container\\\">\\r\\n\\r\\n<div class=\\\"row\\\" fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\">\\r\\n  <div class=\\\"cell\\\" fxFlex.gt-xs=\\\"20\\\" fxFlex.gt-md=\\\"30\\\"></div>\\r\\n\\r\\n  <div class=\\\"cell\\\" fxFlex.gt-xs=\\\"60\\\" fxFlex.gt-md=\\\"40\\\">\\r\\n\\r\\n    <div class=\\\"item centered-container\\\">\\r\\n      <mat-card class=\\\"form-block\\\">\\r\\n        <mat-card-header>\\r\\n          <mat-card-title>\\r\\n            <h2 class=\\\"mat-h2\\\">Відновлення паролю</h2>\\r\\n          </mat-card-title>\\r\\n        </mat-card-header>\\r\\n\\r\\n        <mat-card-content>\\r\\n          <div class=\\\"padding-bottom\\\" fxLayout fxLayoutAlign=\\\"center center\\\">\\r\\n            <img class=\\\"responsive-image\\\" src=\\\"./assets/images/hmade_logo_dark.svg\\\" width=\\\"367px\\\" alt=\\\"HandMADE\\\">\\r\\n          </div>\\r\\n          <div *ngIf=\\\"processing\\\" class=\\\"row\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n            <div class=\\\"cell\\\" fxFlex=\\\"100\\\">\\r\\n              <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\r\\n            </div>\\r\\n          </div>\\r\\n          <mat-vertical-stepper #stepper linear>\\r\\n            <mat-step [stepControl]=\\\"emailForm\\\" editable=\\\"false\\\" >\\r\\n              <form [formGroup]=\\\"emailForm\\\" validate (submit)=\\\"onEmailSubmit(stepper)\\\">\\r\\n                <ng-template matStepLabel>Введіть свій email</ng-template>\\r\\n                <div fxLayout=\\\"row\\\">\\r\\n                  <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                    <mat-icon color=\\\"primary\\\">mail_outline</mat-icon>\\r\\n                  </div>\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" type=\\\"email\\\" required>\\r\\n\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"(emailForm.get('email').errors?.minlength ||\\r\\n                        emailForm.get('email').errors?.maxlength ||\\r\\n                        emailForm.get('email').errors?.required) &&\\r\\n                        emailForm.get('email').touched\\\">\\r\\n                      Довжина повинна бути від 5 до 30 символів\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"emailForm.get('email').errors?.pattern &&\\r\\n                        emailForm.get('email').touched\\\">\\r\\n                      Введіть правільну адресу\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"emailForm.get('email').errors?.invalidEmail &&\\r\\n                        emailForm.get('email').touched\\\">\\r\\n                      Користувач з такою поштою не зареєстрований\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"emailForm.get('email').errors?.unrecognizedError &&\\r\\n                        emailForm.get('email').touched\\\">\\r\\n                        'Сталася помилка'\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n\\r\\n                <re-captcha [ngClass]=\\\"{'display-none': !emailForm.get('email').valid}\\\"\\r\\n                  [formControlName]=\\\"'recaptcha'\\\" #recaptchaRef\\r\\n                            siteKey=\\\"{{config.recaptchaSiteKey}}\\\">\\r\\n                </re-captcha>\\r\\n                <div>\\r\\n                  <button mat-button [disabled]=\\\"!emailForm.valid || processing\\\" aria-label=\\\"Next\\\">Далі</button>\\r\\n                </div>\\r\\n              </form>\\r\\n            </mat-step>\\r\\n\\r\\n            <mat-step [stepControl]=\\\"codeForm\\\" editable=\\\"false\\\">\\r\\n\\r\\n              <form [formGroup]=\\\"codeForm\\\" (submit)=\\\"onCodeSubmit()\\\">\\r\\n                <!--<div *ngIf=\\\"codeForm.get('code').errors\\\">field {{codeForm.get('code').errors | json}}</div>-->\\r\\n                <!--<div *ngIf=\\\"codeForm.errors\\\">form {{codeForm.errors | json}}</div>-->\\r\\n\\r\\n                <ng-template matStepLabel>Введіть код, що надійшов на email</ng-template>\\r\\n                <div fxLayout=\\\"row\\\">\\r\\n                  <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                    <mat-icon color=\\\"primary\\\">settings_ethernet</mat-icon>\\r\\n                  </div>\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Код підтвердження\\\" formControlName=\\\"code\\\" required>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"codeForm.get('code').errors?.required &&\\r\\n                    codeForm.get('code').touched\\\">\\r\\n                      Введіть код\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"codeForm.get('code').errors?.invalidCode &&\\r\\n                        codeForm.get('code').touched\\\">\\r\\n                      Код введено не вірно\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"codeForm.get('code').errors?.maxTries\\\">\\r\\n                      Ви зробили максимальну кількість спроб\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"codeForm.get('code').errors?.unrecognizedError &&\\r\\n                        codeForm.get('code').touched\\\">\\r\\n                      Сталася помилка\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div>\\r\\n                  <button mat-button [disabled]=\\\"!codeForm.valid || processing\\\" aria-label=\\\"Next\\\">Далі</button>\\r\\n                  <button *ngIf=\\\"codeForm.get('code').errors?.maxTries\\\" aria-label=\\\"Refresh\\\"\\r\\n                          mat-button (click)=\\\"refresh()\\\">Оновити сторінку</button>\\r\\n                </div>\\r\\n              </form>\\r\\n            </mat-step>\\r\\n            <mat-step [stepControl]=\\\"passwordForm\\\" editable=\\\"false\\\">\\r\\n              <form [formGroup]=\\\"passwordForm\\\" (submit)=\\\"onPasswordSubmit()\\\">\\r\\n                <ng-template matStepLabel>Введіть новий пароль</ng-template>\\r\\n                <div fxLayout=\\\"row\\\">\\r\\n                  <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                    <mat-icon color=\\\"primary\\\">lock_outline</mat-icon>\\r\\n                  </div>\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Пароль\\\" formControlName=\\\"password\\\"\\r\\n                           required [type]=\\\"hidePassword ? 'password' : 'text'\\\">\\r\\n                    <mat-icon class=\\\"muted\\\" matSuffix (click)=\\\"hidePassword = !hidePassword\\\">\\r\\n                      {{hidePassword ? 'visibility' : 'visibility_off'}}\\r\\n                    </mat-icon>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"(passwordForm.get('password').errors?.minlength ||\\r\\n                          passwordForm.get('password').errors?.maxlength ||\\r\\n                          passwordForm.get('password').errors?.required) &&\\r\\n                          passwordForm.get('password').touched\\\">\\r\\n                      Довжина повинна бути від 6 до 15 символів\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"passwordForm.get('password').errors?.pattern &&\\r\\n                         passwordForm.get('password').touched\\\">\\r\\n                      Використовуйте тільки латинські символи та цифри\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n\\r\\n                <div fxLayout=\\\"row\\\">\\r\\n                  <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                    <!--<mat-icon color=\\\"primary\\\">lock</mat-icon>-->\\r\\n                  </div>\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Підтвердіть пароль\\\" formControlName=\\\"passwordConfirm\\\"\\r\\n                           required [type]=\\\"hidePassword ? 'password' : 'text'\\\">\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"passwordForm.get('passwordConfirm').errors?.mismatch &&\\r\\n                      passwordForm.get('passwordConfirm').touched\\\">\\r\\n                      Пароль не збігається\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div>\\r\\n                  <button mat-button [disabled]=\\\"!passwordForm.valid || processing\\\" aria-label=\\\"Finish\\\">Завершити</button>\\r\\n                </div>\\r\\n              </form>\\r\\n            </mat-step>\\r\\n          </mat-vertical-stepper>\\r\\n        </mat-card-content>\\r\\n      </mat-card>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n</div>\"","module.exports = \"\"","import { Component,  OnInit, ViewChild } from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { UserService } from '../../../services/user.service';\r\nimport { ValidateService } from '../../../services/validate.service';\r\nimport { MatSnackBar, MatStepper } from '@angular/material';\r\nimport { Router } from '@angular/router';\r\nimport { config } from '../../../app.config';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-password-reset',\r\n  templateUrl: './user-password-reset.component.html',\r\n  styleUrls: ['./user-password-reset.component.scss']\r\n})\r\nexport class UserPasswordResetComponent implements OnInit {\r\n  config = config;\r\n  emailForm: FormGroup;\r\n  codeForm: FormGroup;\r\n  passwordForm: FormGroup;\r\n  hidePassword = true;\r\n  processing = false;\r\n  // result = false;\r\n  error: {};\r\n  @ViewChild('stepper') matStepper: MatStepper;\r\n  @ViewChild('recaptchaRef') recaptchaRef;\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private validateService: ValidateService,\r\n    private matSnackBar: MatSnackBar,\r\n    private router: Router,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const emailPattern = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\n\r\n    this.emailForm = new FormGroup({\r\n      email: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(5),\r\n        Validators.maxLength(30),\r\n        Validators.pattern(emailPattern),\r\n      ]),\r\n      recaptcha: new FormControl('', [\r\n        Validators.required\r\n      ])\r\n      },\r\n    );\r\n\r\n    this.codeForm = new FormGroup({\r\n        code: new FormControl('', [\r\n          Validators.required,\r\n        ]),\r\n      },\r\n    );\r\n\r\n    this.passwordForm = new FormGroup({\r\n        password: new FormControl('', [\r\n          Validators.required,\r\n          Validators.minLength(6),\r\n          Validators.maxLength(15),\r\n          Validators.pattern('[a-zA-Z0-9]+'),\r\n        ]),\r\n        passwordConfirm: new FormControl('', [\r\n          Validators.required,\r\n        ]),\r\n      },\r\n      this.validateService.matchPassword\r\n    );\r\n  }\r\n\r\n  onEmailSubmit(stepper) {\r\n    this.processing = true;\r\n    this.userService.userLocalRemoveToken('token');\r\n    this.userService.userLocalRemoveToken('codeToken');\r\n    this.userService.userLocalRemoveToken('passwordResetToken');\r\n\r\n    const email = this.emailForm.get('email').value;\r\n    const recaptcha = this.emailForm.get('recaptcha').value;\r\n    this.userService.userPasswordResetEmail(email, recaptcha)\r\n      .subscribe(\r\n        result => {\r\n          this.processing = false;\r\n          this.emailForm.get('email').setErrors(null);\r\n          this.matStepper.next();\r\n          const codeToken = result;\r\n          this.userService.userLocalSetToken('codeToken', codeToken);\r\n        },\r\n        err => {\r\n          this.processing = false;\r\n          if (err.error.code === 'wrongCredentials') {\r\n            this.emailForm.get('email').setErrors({invalidEmail: true});\r\n          } else {\r\n            this.matStepper.reset();\r\n            this.matSnackBar.open('Сталася помилка', '',\r\n            {duration: 3000, panelClass: 'snack-bar-danger'});\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  onCodeSubmit() {\r\n    this.processing = true;\r\n    const code = this.codeForm.get('code').value;\r\n\r\n    const codeToken = this.userService.userLocalGetToken('codeToken');\r\n    this.userService.userPasswordResetCode(code, codeToken)\r\n      .subscribe(\r\n        passwordResetToken => {\r\n          this.processing = false;\r\n          this.codeForm.get('code').setErrors(null);\r\n          this.matStepper.next();\r\n          this.userService.userLocalRemoveToken('codeToken');\r\n          this.userService.userLocalSetToken('passwordResetToken', passwordResetToken);\r\n        },\r\n        err => {\r\n          this.processing = false;\r\n          if (err.error.code === 'wrongCredentials') {\r\n            this.codeForm.get('code').setErrors({invalidCode: true});\r\n          } else if (err.error.code === 'maxTries') {\r\n            this.codeForm.get('code').setErrors({maxTries: true});\r\n            this.codeForm.setValidators(this.validateService.maxTries);\r\n            setTimeout(() => {\r\n              this.router.navigate(['/']);\r\n            }, 3000);\r\n              this.matSnackBar.open('Код невірний, спрпобуйте пізніше', '',\r\n              {duration: 4000, panelClass: 'snack-bar-danger'});\r\n\r\n          } else {\r\n            this.codeForm.get('code').setErrors({unrecognizedError: true});\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  onPasswordSubmit() {\r\n    this.processing = true;\r\n    const password = this.passwordForm.get('password').value;\r\n\r\n    const passwordResetToken = this.userService.userLocalGetToken('passwordResetToken');\r\n    this.userService.userPasswordReset(password, passwordResetToken)\r\n      .subscribe(result => {\r\n          const token = result;\r\n          this.processing = false;\r\n          this.userService.userLocalRemoveToken('passwordResetToken');\r\n          this.userService.logging();\r\n          this.router.navigate(['/user', 'profile']);\r\n          this.matSnackBar.open('Пароль відновлено', '',\r\n            {duration: 3000, panelClass: 'snack-bar-danger'});\r\n        },\r\n        err => {\r\n          this.processing = false;\r\n          this.matSnackBar.open(err.error.message || 'Сталася помилка', '',\r\n            {duration: 3000, panelClass: 'snack-bar-danger'});\r\n        }\r\n      );\r\n  }\r\n\r\n  goHomePage() {\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"container\\\">\\r\\n\\r\\n<div class=\\\"row\\\" fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\">\\r\\n  <div class=\\\"cell\\\" fxFlex.gt-xs=\\\"20\\\" fxFlex.gt-md=\\\"30\\\"></div>\\r\\n\\r\\n  <div class=\\\"cell\\\" fxFlex.gt-xs=\\\"60\\\" fxFlex.gt-md=\\\"40\\\">\\r\\n\\r\\n    <div class=\\\"item centered-container\\\" *ngIf=\\\"user\\\">\\r\\n      <div class=\\\"info-block mat-elevation-z4\\\">\\r\\n\\r\\n        <div class=\\\"avatar-block\\\">\\r\\n          <form [formGroup]=\\\"changeAvatarForm\\\" (submit)=\\\"onSubmitChangeAvatarForm()\\\">\\r\\n\\r\\n          <div class=\\\"avatar-img-wrapper\\\">\\r\\n            <img *ngIf=\\\"!previewAvatarUrl\\\" src=\\\"{{user.role === 'google' ? \\r\\n              user.avatar :\\r\\n              config.imgPath +\\r\\n              config.cloudinary.cloud_name +\\r\\n              '/c_fill,w_180,h_180,f_auto/' +\\r\\n              user.avatar}}\\\" alt=\\\"avatar\\\">\\r\\n            <img *ngIf=\\\"previewAvatarUrl\\\"  src=\\\"{{previewAvatarUrl}}\\\" alt=\\\"avatar\\\">\\r\\n\\r\\n            <div *ngIf=\\\"processingChangeAvatar\\\" class=\\\"avatar-div-processing\\\">\\r\\n              <div class=\\\"spinner-wrapper\\\">\\r\\n                <mat-spinner [diameter]=\\\"24\\\"></mat-spinner>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div *ngIf=\\\"!editAvatar && !processingChangeAvatar && restrictTo(['google', 'facebook'])\\\" class=\\\"avatar-div-change\\\"></div>\\r\\n            <div *ngIf=\\\"!editAvatar && !processingChangeAvatar && restrictTo(['google', 'facebook'])\\\" class=\\\"avatar-button-change\\\">\\r\\n              <input type=\\\"file\\\" accept=\\\".jpg, .jpe, .jpeg, .bmp, .webp, .png, .gif\\\" (change)=\\\"changeAvatar($event)\\\" id=\\\"input-file\\\">\\r\\n              <label for=\\\"input-file\\\">Змінити\\r\\n              </label>\\r\\n            </div>\\r\\n\\r\\n\\r\\n            <div *ngIf=\\\"editAvatar && !processingChangeAvatar\\\">\\r\\n              <div class=\\\"avatar-div-ok\\\" >\\r\\n              </div>\\r\\n              <div class=\\\"avatar-div-cancel\\\">\\r\\n              </div>\\r\\n              <button class=\\\"avatar-button-ok\\\" [disabled]=\\\"!changeAvatarForm.valid\\\" aria-label=\\\"Done\\\">\\r\\n                <mat-icon>done</mat-icon>\\r\\n              </button>\\r\\n              <button type=\\\"button\\\" class=\\\"avatar-button-cancel\\\" (click)=\\\"cancelChangeAvatar()\\\" aria-label=\\\"Cancel\\\">\\r\\n                <mat-icon>cancel</mat-icon>\\r\\n              </button>\\r\\n            </div>\\r\\n          </div>\\r\\n          </form>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"info-block-row-wrapper\\\">\\r\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row\\\">\\r\\n            <div class=\\\"info-block-row-title mat-title\\\">{{user.name}} {{user.surname}}</div>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"info-block-row-wrapper\\\">\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row\\\">\\r\\n              <!--<div fxFlex=\\\"100%\\\">-->\\r\\n                <div class=\\\"info-block-row-title mat-subheading-1\\\" fxFlex=\\\"40%\\\">Email</div>\\r\\n                <div class=\\\"mat-body-1 muted\\\" fxFlex=\\\"60%\\\">{{user.email}}</div>\\r\\n                <!-- <mat-icon *ngIf=\\\"processing !== 'email'\\\" fxFlex=\\\"30px\\\"\\r\\n                          (click)=\\\"openDialog(makeEmailObject())\\\" class=\\\"muted\\\">edit</mat-icon> -->\\r\\n                <mat-spinner *ngIf=\\\"processing === 'email'\\\" fxFlex=\\\"30px\\\" [diameter]=\\\"24\\\"></mat-spinner>\\r\\n              <!--</div>-->\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div *ngIf=\\\"user.role === 'guest' && !verificationSent\\\" class=\\\"info-block-row-wrapper border-0\\\">\\r\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row mail-verification\\\">\\r\\n            <div class=\\\"mat-body-1\\\" fxFlex=\\\"100%\\\">\\r\\n              <p>Пошту не верифіковано, надіслати код.</p>\\r\\n              <p>Деякі функції будуть недоступні. Наприклад, відправка коментарів</p>\\r\\n            </div>\\r\\n            <mat-icon *ngIf=\\\"processing !== 'verification'\\\" fxFlex=\\\"30px\\\" (click)=\\\"onVerificationSend()\\\">mail</mat-icon>\\r\\n            <mat-spinner *ngIf=\\\"processing === 'verification'\\\" fxFlex=\\\"30px\\\" [diameter]=\\\"24\\\"></mat-spinner>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div *ngIf=\\\"user.role === 'guest' && verificationSent\\\" class=\\\"info-block-row-wrapper border-0\\\">\\r\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row mail-verification\\\">\\r\\n            <div class=\\\"mat-body-1 muted\\\" fxFlex=\\\"100%\\\">На пошту надіслано посилання</div>\\r\\n            <mat-icon *ngIf=\\\"processing !== 'verification'\\\" fxFlex=\\\"30px\\\" class=\\\"muted\\\" (click)=\\\"onVerificationSend()\\\">refresh</mat-icon>\\r\\n            <mat-spinner *ngIf=\\\"processing === 'verification'\\\" fxFlex=\\\"30px\\\" [diameter]=\\\"24\\\"></mat-spinner>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"info-block-row-wrapper\\\">\\r\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row\\\">\\r\\n            <div class=\\\"info-block-row-title mat-subheading-1\\\" fxFlex=\\\"40%\\\">Ім'я</div>\\r\\n            <!--<div fxFlex></div>-->\\r\\n            <div class=\\\"mat-subheading-2 muted\\\" fxFlex=\\\"60%\\\">{{user.name}}</div>\\r\\n            <mat-icon *ngIf=\\\"processing !== 'name' && restrictTo(['google', 'facebook'])\\\" fxFlex=\\\"30px\\\"\\r\\n                      (click)=\\\"openDialog(makeNameObject())\\\" class=\\\"muted\\\">edit</mat-icon>\\r\\n            <mat-spinner *ngIf=\\\"processing === 'name'\\\" fxFlex=\\\"30px\\\" [diameter]=\\\"24\\\"></mat-spinner>\\r\\n\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"info-block-row-wrapper\\\">\\r\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row\\\">\\r\\n            <div class=\\\"info-block-row-title mat-subheading-1\\\" fxFlex=\\\"40%\\\">Прізвище</div>\\r\\n            <!--<div fxFlex></div>-->\\r\\n            <div class=\\\"mat-subheading-2 muted\\\" fxFlex=\\\"60%\\\">{{user.surname}}</div>\\r\\n            <mat-icon *ngIf=\\\"processing !== 'surname' && restrictTo(['google', 'facebook'])\\\" fxFlex=\\\"30px\\\"\\r\\n                      (click)=\\\"openDialog(makeSurnameObject())\\\" class=\\\"muted\\\">edit</mat-icon>\\r\\n            <mat-spinner *ngIf=\\\"processing === 'surname'\\\" fxFlex=\\\"30px\\\" [diameter]=\\\"24\\\"></mat-spinner>\\r\\n\\r\\n          </div>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"restrictTo(['google', 'facebook'])\\\" class=\\\"info-block-row-wrapper\\\">\\r\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row\\\">\\r\\n            <div fxFlex=\\\"60%\\\"></div>\\r\\n            <div fxFlex=\\\"40%\\\">\\r\\n              <button mat-button (click)=\\\"openDialog(makePasswordObject())\\\" aria-label=\\\"Change password\\\">\\r\\n                <span *ngIf=\\\"processing !== 'password'\\\">Змінити пароль</span>\\r\\n                <mat-spinner *ngIf=\\\"processing === 'password'\\\" [diameter]=\\\"24\\\"></mat-spinner>\\r\\n              </button>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../../../services/user.service';\r\nimport { IUser } from '../../../interfaces/user-interface';\r\nimport { config } from '../../../app.config';\r\nimport { MatDialog, MatSnackBar } from '@angular/material';\r\nimport { Router } from '@angular/router';\r\nimport { UserDialogComponent } from '../user-dialog/user-dialog.component';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { of } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { IResponse } from '../../../interfaces/server-response-interface';\r\n\r\n@Component({\r\n  selector: 'app-user-profile',\r\n  templateUrl: './user-profile.component.html',\r\n  styleUrls: ['./user-profile.component.scss']\r\n})\r\nexport class UserProfileComponent implements OnInit {\r\n\r\n  config = config;\r\n  user: IUser;\r\n  processing: string;\r\n  changeAvatarForm: FormGroup;\r\n  editAvatar = false;\r\n  previewAvatarUrl;\r\n  processingChangeAvatar = false;\r\n  verificationSent = false;\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private matSnackBar: MatSnackBar,\r\n    private router: Router,\r\n    public dialog: MatDialog,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getProfile();\r\n\r\n    this.changeAvatarForm = new FormGroup({\r\n      file : new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(4),\r\n      ]),\r\n    });\r\n  }\r\n\r\n  allowTo(permitedRole: string): boolean {\r\n    return this.userService.allowTo(permitedRole);\r\n  }\r\n\r\n  restrictTo(restrictedRoles: string[]): boolean {\r\n    return this.userService.restrictTo(restrictedRoles);\r\n  }\r\n  \r\n  onVerificationSend() {\r\n    this.verificationSent = true;\r\n    this.processing = 'verification';\r\n    this.userService.userEmailVerification()\r\n      .subscribe(result => {\r\n        this.processing = '';\r\n        this.matSnackBar.open(result.message, '',\r\n          {duration: 3000});\r\n      },\r\n        err => {\r\n          this.processing = '';\r\n          // this.matSnackBar.open(err.error || 'Помилка', '',\r\n          //   {duration: 3000, panelClass: 'snack-bar-danger'});\r\n        }\r\n\r\n      );\r\n  }\r\n\r\n  onSubmitChangeAvatarForm() {\r\n    this.processingChangeAvatar = true;\r\n    this.userService.userEditAvatar(this.changeAvatarForm.get('file').value)\r\n      .subscribe(result => {\r\n        this.matSnackBar.open(result, '',\r\n            {duration: 3000});\r\n        this.getProfile();\r\n        this.previewAvatarUrl = null;\r\n        this.processingChangeAvatar = false;\r\n        this.editAvatar = false;\r\n      },\r\n        err =>\r\n          this.matSnackBar.open(err.error.message || 'Помилка', '',\r\n            {duration: 3000, panelClass: 'snack-bar-danger'})\r\n      );\r\n  }\r\n\r\n  changeAvatar(event) {\r\n    this.editAvatar = true;\r\n    const checkFile = this.userService.checkFile(event.target);\r\n\r\n    if (!checkFile.success) {\r\n      this.cancelChangeAvatar();\r\n      this.matSnackBar.open(checkFile.message || 'Помилка', '',\r\n        {duration: 3000, panelClass: 'snack-bar-danger'});\r\n    } else {\r\n      this.changeAvatarForm.get('file').setValue(event.target.files[0]);\r\n\r\n      const reader = new FileReader();\r\n\r\n      reader.addEventListener('load', (readerEvent: any) => {\r\n        // .jpg, .jpe, .jpeg, .bmp, .webp, .png\r\n        this.previewAvatarUrl = readerEvent.target.result;\r\n      });\r\n\r\n      reader.readAsDataURL(event.target.files[0]);\r\n    }\r\n  }\r\n\r\n  cancelChangeAvatar() {\r\n    this.changeAvatarForm.get('file').setValue(null);\r\n    this.editAvatar = false;\r\n    this.previewAvatarUrl = null;\r\n  }\r\n\r\n  getProfile(): void {\r\n    this.userService.userGetProfile()\r\n      .subscribe(\r\n        user => {\r\n          this.user = user;\r\n        },\r\n        err => {\r\n          this.matSnackBar.open(err.error, '',\r\n            {duration: 3000, panelClass: 'snack-bar-danger'});\r\n          this.router.navigate(['/user', 'login']);\r\n        }\r\n      );\r\n  }\r\n\r\n  openDialog(object): void {\r\n\r\n    const dialogRef = this.dialog.open(UserDialogComponent, {\r\n      width: '400px',\r\n      data: object,\r\n    });\r\n\r\n    dialogRef.afterClosed().pipe(\r\n      mergeMap(result => {\r\n        if (result) {\r\n          return this.userService.userEdit(result);\r\n        } else {\r\n          return of(null);\r\n        }\r\n      })\r\n    )\r\n      .subscribe(result => {\r\n          this.processing = null;\r\n          if (!result) {\r\n            // didn't get data from dialog\r\n            return;\r\n          } else {\r\n            this.matSnackBar.open(result, '',\r\n              {duration: 3000});\r\n            this.getProfile();\r\n          }\r\n        },\r\n        err => {\r\n          this.processing = null;\r\n          this.matSnackBar.open(err.error.message || 'Помилка', '',\r\n            {duration: 3000, panelClass: 'snack-bar-danger'});\r\n        }\r\n      );\r\n  }\r\n\r\n  makePasswordObject() {\r\n    this.processing = 'password';\r\n    return {\r\n      payload: [{\r\n        name: 'password',\r\n        label: 'Новий пароль',\r\n        type: 'password',\r\n        icon: 'lock_outline',\r\n        validators: [\r\n          {\r\n            name: 'length',\r\n            message: 'Довжина повинна бути від 6 до 15 символів'\r\n          },\r\n          {\r\n            name: 'pattern',\r\n            message : 'Використовуйте тільки латинські символи та цифри'\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        name: 'passwordConfirm',\r\n        label: 'Підтвердіть пароль',\r\n        type: 'password',\r\n        icon: '',\r\n        validators: [\r\n          {\r\n            name: 'require',\r\n            message : 'Це поле не може бути пустим'\r\n          },\r\n          {\r\n            name: 'match',\r\n            message : 'Пароль не збігається'\r\n          },\r\n        ]\r\n      },\r\n      {\r\n        name: 'passwordCurrent',\r\n        label: 'Діючий пароль',\r\n        type: 'password',\r\n        icon: '',\r\n        validators: [\r\n          {\r\n            name: 'require',\r\n            message : 'Це поле не може бути пустим'\r\n          }\r\n        ],\r\n      }],\r\n\r\n      initForm: function(): FormGroup {\r\n        return new FormGroup({\r\n          password: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(6),\r\n            Validators.maxLength(15),\r\n            Validators.pattern('[a-zA-Z0-9]+'),\r\n          ]),\r\n          passwordConfirm: new FormControl('', [\r\n            Validators.required,\r\n          ]),\r\n          passwordCurrent: new FormControl('', [\r\n            Validators.required,\r\n          ]),\r\n        },\r\n          function matchPassword(abstractControl: AbstractControl) {\r\n          const password = abstractControl.get('password').value;\r\n          const passwordConfirm = abstractControl.get('passwordConfirm').value;\r\n            if (password === passwordConfirm) {\r\n            abstractControl.get('passwordConfirm').setErrors(null);\r\n            return null;\r\n          } else {\r\n            abstractControl.get('passwordConfirm').setErrors({mismatch: true});\r\n            return null;\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  // makeEmailObject() {\r\n  //   this.processing = 'email';\r\n  //   const emailPattern = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\n  //   return {\r\n  //     payload: [{\r\n  //       name: 'email',\r\n  //       label: 'Email',\r\n  //       type: 'email',\r\n  //       icon: 'mail_outline',\r\n  //       oldValue: this.user.email,\r\n  //       validators: [\r\n  //         {\r\n  //           name: 'length',\r\n  //           message: 'Довжина повинна бути від 5 до 30 символів'\r\n  //         },\r\n  //         {\r\n  //           name: 'pattern',\r\n  //           message: 'Введіть правільну адресу'\r\n  //         }\r\n  //       ],\r\n  //       },\r\n  //       {\r\n  //       name: 'passwordCurrent',\r\n  //       label: 'Введіть пароль',\r\n  //       type: 'password',\r\n  //       icon: '',\r\n  //       validators: [\r\n  //         {\r\n  //           name: 'require',\r\n  //           message : 'Це поле не може бути пустим'\r\n  //         }\r\n  //       ],\r\n  //     }],\r\n  //     initForm: function () {\r\n  //       return new FormGroup({\r\n  //         email: new FormControl('', [\r\n  //           Validators.required,\r\n  //           Validators.minLength(5),\r\n  //           Validators.maxLength(30),\r\n  //           Validators.pattern(emailPattern),\r\n  //         ]),\r\n  //         passwordCurrent: new FormControl('', [\r\n  //           Validators.required,\r\n  //         ]),\r\n  //       });\r\n  //     },\r\n  //   };\r\n  // }\r\n\r\n  makeNameObject() {\r\n    this.processing = 'name';\r\n    return {\r\n      payload: [{\r\n        name: 'name',\r\n        label: 'Ім\\'я',\r\n        type: '',\r\n        icon: 'perm_identity',\r\n        oldValue: this.user.name,\r\n        validators: [\r\n          {\r\n            name: 'length',\r\n            message: 'Довжина повинна бути від 2 до 20 символів'\r\n          },\r\n          {\r\n            name: 'pattern',\r\n            message: 'Використовуйте букви і цифри'\r\n          }\r\n        ],\r\n      },\r\n        {\r\n          name: 'passwordCurrent',\r\n          label: 'Введіть пароль',\r\n          type: 'password',\r\n          icon: '',\r\n          validators: [\r\n            {\r\n              name: 'require',\r\n              message : 'Це поле не може бути пустим'\r\n            }\r\n          ],\r\n        }],\r\n      initForm: function () {\r\n        return new FormGroup({\r\n          name: new FormControl('', [\r\n            Validators.minLength(2),\r\n            Validators.maxLength(20),\r\n            Validators.pattern('[a-zA-Z0-9а-яА-ЯіїєІЇЄ\\' ]+'),\r\n          ]),\r\n          passwordCurrent: new FormControl('', [\r\n            Validators.required,\r\n          ]),\r\n        });\r\n      },\r\n    };\r\n  }\r\n\r\n  makeSurnameObject() {\r\n    this.processing = 'surname';\r\n    return {\r\n      payload: [{\r\n        name: 'surname',\r\n        label: 'Прізвище',\r\n        type: '',\r\n        icon: 'perm_identity',\r\n        oldValue: this.user.surname,\r\n        validators: [\r\n          {\r\n            name: 'length',\r\n            message: 'Довжина повинна бути від 2 до 20 символів'\r\n          },\r\n          {\r\n            name: 'pattern',\r\n            message: 'Використовуйте букви і цифри'\r\n          }\r\n        ],\r\n      },\r\n        {\r\n          name: 'passwordCurrent',\r\n          label: 'Введіть пароль',\r\n          type: 'password',\r\n          icon: '',\r\n          validators: [\r\n            {\r\n              name: 'require',\r\n              message : 'Це поле не може бути пустим'\r\n            }\r\n          ],\r\n        }],\r\n      initForm: function () {\r\n        return new FormGroup({\r\n          surname: new FormControl('', [\r\n            Validators.minLength(2),\r\n            Validators.maxLength(20),\r\n            Validators.pattern('[a-zA-Z0-9а-яА-ЯіїєІЇЄ\\' ]+'),\r\n          ]),\r\n          passwordCurrent: new FormControl('', [\r\n            Validators.required,\r\n          ]),\r\n        });\r\n      },\r\n    };\r\n  }\r\n}\r\n","import { Routes, RouterModule } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { UserComponent } from './user.component';\r\nimport { UserCreateComponent } from './user-create/user-create.component';\r\nimport { UserLoginComponent } from './user-login/user-login.component';\r\nimport { UserProfileComponent } from './user-profile/user-profile.component';\r\nimport { UserPasswordResetComponent } from './user-password-reset/user-password-reset.component';\r\nimport { AuthGuard } from '../../guards/auth.guard';\r\nimport { NoAuthGuard } from '../../guards/no-auth.guard';\r\nimport { Page404Component } from '../shared/page-404/page-404.component';\r\nimport { RedirectionWithTokenComponent } from './redirection-with-token/redirection-with-token.component';\r\n\r\nconst userRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserComponent,\r\n    children: [\r\n      {\r\n        path: 'create',\r\n        component: UserCreateComponent,\r\n        // canActivate: [AuthGuard],\r\n        // data: { auth: 'manager' },\r\n      },\r\n      {\r\n        path: 'login',\r\n        component: UserLoginComponent,\r\n        canActivate: [NoAuthGuard],\r\n        data: {auth: ['guest', 'user', 'manager', 'admin', 'google', 'facebook']},\r\n      },\r\n      {\r\n        path: 'profile',\r\n        component: UserProfileComponent,\r\n        canActivate: [AuthGuard],\r\n        data: {auth: 'guest'},\r\n      },\r\n      {\r\n        path: 'password-reset',\r\n        component: UserPasswordResetComponent,\r\n      },\r\n      {\r\n        path: 'redirection-with-token/:token',\r\n        component: RedirectionWithTokenComponent,\r\n      },\r\n      { path: '', component: Page404Component },\r\n\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(\r\n      userRoutes\r\n    )],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class UserRoutingModule {}\r\n","module.exports = \"<div id=\\\"user\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"app-container-h app-container-v\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-user',\r\n  templateUrl: './user.component.html',\r\n  styleUrls: ['./user.component.scss']\r\n})\r\nexport class UserComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserComponent } from './user.component';\r\nimport { UserRoutingModule } from './user-routing.module';\r\nimport { UserCreateComponent } from './user-create/user-create.component';\r\nimport { UserLoginComponent } from './user-login/user-login.component';\r\nimport { MaterialModule } from '../../material.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { UserProfileComponent } from './user-profile/user-profile.component';\r\nimport { UserDialogComponent } from './user-dialog/user-dialog.component';\r\nimport { UserPasswordResetComponent } from './user-password-reset/user-password-reset.component';\r\nimport { RecaptchaModule } from 'ng-recaptcha';\r\nimport { RecaptchaFormsModule } from 'ng-recaptcha/forms';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { RedirectionWithTokenComponent } from './redirection-with-token/redirection-with-token.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UserComponent,\r\n    UserCreateComponent,\r\n    UserLoginComponent,\r\n    UserProfileComponent,\r\n    UserDialogComponent,\r\n    UserPasswordResetComponent,\r\n    RedirectionWithTokenComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    UserRoutingModule,\r\n    MaterialModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    RecaptchaModule,\r\n    RecaptchaFormsModule,\r\n    SharedModule\r\n  ],\r\n  exports: [\r\n  ],\r\n  entryComponents: [\r\n    UserDialogComponent,\r\n  ]\r\n})\r\n\r\nexport class UserModule { }\r\n"],"sourceRoot":""}