{"version":3,"sources":["./src/app/components/user/redirection-after-oauth/redirection-after-oauth.component.html","./src/app/components/user/user-create/user-create.component.html","./src/app/components/user/user-login/user-login.component.html","./src/app/components/user/user-password-reset/user-password-reset.component.html","./src/app/components/user/user-profile/user-profile.component.html","./src/app/components/user/user.component.html","./src/app/components/user/redirection-after-oauth/redirection-after-oauth.component.scss","./src/app/components/user/redirection-after-oauth/redirection-after-oauth.component.ts","./src/app/components/user/user-create/user-create.component.scss","./src/app/components/user/user-create/user-create.component.ts","./src/app/components/user/user-login/user-login.component.scss","./src/app/components/user/user-login/user-login.component.ts","./src/app/components/user/user-password-reset/user-password-reset.component.scss","./src/app/components/user/user-password-reset/user-password-reset.component.ts","./src/app/components/user/user-profile/user-profile.component.scss","./src/app/components/user/user-profile/user-profile.component.ts","./src/app/components/user/user-routing.module.ts","./src/app/components/user/user.component.scss","./src/app/components/user/user.component.ts","./src/app/components/user/user.module.ts"],"names":[],"mappings":"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","file":"default~components-dashboard-dashboard-module~components-user-user-module.js","sourcesContent":["export default \"<lib-redir-after-oauth></lib-redir-after-oauth>\\r\\n<!-- <div class=\\\"row\\\" fxLayout=\\\"row\\\">\\r\\n  <div class=\\\"cell\\\" fxFlex=\\\"100\\\">\\r\\n    <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\r\\n  </div>\\r\\n</div> -->\"","export default \"<lib-create></lib-create>\\r\\n\\r\\n<!-- <div class=\\\"container\\\">\\r\\n\\r\\n  <div class=\\\"row\\\" fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\">\\r\\n    <div fxFlex.gt-xs=\\\"20\\\" fxFlex.gt-md=\\\"30\\\"></div>\\r\\n\\r\\n    <div class=\\\"cell\\\" fxFlex.gt-xs=\\\"60\\\" fxFlex.gt-md=\\\"40\\\">\\r\\n\\r\\n      <div class=\\\"centered-container\\\">\\r\\n        <mat-card class=\\\"form-block\\\">\\r\\n          <mat-card-content>\\r\\n            <div class=\\\"padding-bottom\\\" fxLayout fxLayoutAlign=\\\"center center\\\">\\r\\n              <img class=\\\"responsive-image\\\" src=\\\"./assets/images/hmade_logo_dark.svg\\\" width=\\\"367px\\\" alt=\\\"HandMADE\\\">\\r\\n            </div>\\r\\n\\r\\n            <form [formGroup]=\\\"userCreateForm\\\" (submit)=\\\"onUserCreateSubmit()\\\">\\r\\n              <div fxLayout=\\\"row\\\">\\r\\n                <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                  <mat-icon color=\\\"primary\\\">account_box</mat-icon>\\r\\n                </div>\\r\\n                <mat-form-field>\\r\\n                  <input matInput placeholder=\\\"Логін\\\" formControlName=\\\"login\\\" required>\\r\\n                  <mat-error *ngIf=\\\"(userCreateForm.get('login').errors?.minlength ||\\r\\n                      userCreateForm.get('login').errors?.maxlength ||\\r\\n                      userCreateForm.get('login').errors?.required) &&\\r\\n                      userCreateForm.get('login').touched\\\">\\r\\n                    Довжина повинна бути від 4 до 15 символів\\r\\n                  </mat-error>\\r\\n                  <mat-error *ngIf=\\\"userCreateForm.get('login').errors?.pattern &&\\r\\n                     userCreateForm.get('login').touched\\\">\\r\\n                    Використовуйте тільки латинські символи і цифри\\r\\n                  </mat-error>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n              <div fxLayout=\\\"row\\\">\\r\\n                <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                  <mat-icon color=\\\"primary\\\">account_circle</mat-icon>\\r\\n                </div>\\r\\n                <mat-form-field>\\r\\n                  <input matInput placeholder=\\\"Ім'я\\\" formControlName=\\\"name\\\" required>\\r\\n                  <mat-error *ngIf=\\\"(userCreateForm.get('name').errors?.minlength ||\\r\\n                      userCreateForm.get('name').errors?.maxlength ||\\r\\n                      userCreateForm.get('name').errors?.required) &&\\r\\n                      userCreateForm.get('name').touched\\\">\\r\\n                    Довжина повинна бути від 2 до 20 символів\\r\\n                  </mat-error>\\r\\n                  <mat-error *ngIf=\\\"userCreateForm.get('name').errors?.pattern &&\\r\\n                     userCreateForm.get('name').touched\\\">\\r\\n                    Використовуйте тільки букви і цифри\\r\\n                  </mat-error>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n              <div fxLayout=\\\"row\\\">\\r\\n                <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                  <mat-icon color=\\\"primary\\\">supervised_user_circle</mat-icon>\\r\\n                </div>\\r\\n                <mat-form-field>\\r\\n                  <input matInput placeholder=\\\"Прізвище\\\" formControlName=\\\"surname\\\" required>\\r\\n                  <mat-error *ngIf=\\\"(userCreateForm.get('surname').errors?.minlength ||\\r\\n                      userCreateForm.get('surname').errors?.maxlength ||\\r\\n                      userCreateForm.get('surname').errors?.required) &&\\r\\n                      userCreateForm.get('surname').touched\\\">\\r\\n                    Довжина повинна бути від 2 до 20 символів\\r\\n                  </mat-error>\\r\\n                  <mat-error *ngIf=\\\"userCreateForm.get('surname').errors?.pattern &&\\r\\n                     userCreateForm.get('surname').touched\\\">\\r\\n                    Використовуйте тільки букви і цифри\\r\\n                  </mat-error>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n              <div fxLayout=\\\"row\\\">\\r\\n                <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                  <mat-icon color=\\\"primary\\\">lock_outline</mat-icon>\\r\\n                </div>\\r\\n                <mat-form-field>\\r\\n                  <input matInput placeholder=\\\"Пароль\\\" formControlName=\\\"password\\\" required\\r\\n                    [type]=\\\"hidePassword ? 'password' : 'text'\\\">\\r\\n                  <mat-icon color=\\\"accent\\\" matSuffix (click)=\\\"hidePassword = !hidePassword\\\">\\r\\n                    {{hidePassword ? 'visibility' : 'visibility_off'}}</mat-icon>\\r\\n                  <mat-error *ngIf=\\\"(userCreateForm.get('password').errors?.minlength ||\\r\\n                          userCreateForm.get('password').errors?.maxlength ||\\r\\n                          userCreateForm.get('password').errors?.required) &&\\r\\n                          userCreateForm.get('password').touched\\\">\\r\\n                    Довжина повинна бути від 6 до 15 символів\\r\\n                  </mat-error>\\r\\n                  <mat-error *ngIf=\\\"userCreateForm.get('password').errors?.pattern &&\\r\\n                         userCreateForm.get('password').touched\\\">\\r\\n                    Використовуйте тільки латинські символи та цифри\\r\\n                  </mat-error>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n              <div fxLayout=\\\"row\\\">\\r\\n                <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                </div>\\r\\n                <mat-form-field>\\r\\n                  <input matInput placeholder=\\\"Підтвердіть пароль\\\" formControlName=\\\"passwordConfirm\\\" required\\r\\n                    [type]=\\\"hidePassword ? 'password' : 'text'\\\">\\r\\n\\r\\n                  <mat-icon\\r\\n                    *ngIf=\\\"!userCreateForm.get('passwordConfirm').errors?.mismatch && !userCreateForm.get('password').errors\\\"\\r\\n                    matSuffix color=\\\"accent\\\">verified_user</mat-icon>\\r\\n\\r\\n                  <mat-error *ngIf=\\\"userCreateForm.get('passwordConfirm').errors?.mismatch &&\\r\\n                      userCreateForm.get('passwordConfirm').touched\\\">\\r\\n                    Пароль не збігається\\r\\n                  </mat-error>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n\\r\\n              <div fxLayout=\\\"row\\\">\\r\\n                <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                  <mat-icon color=\\\"primary\\\">mail_outline</mat-icon>\\r\\n                </div>\\r\\n                <mat-form-field>\\r\\n                  <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" type=\\\"email\\\" required>\\r\\n                  <mat-error *ngIf=\\\"(userCreateForm.get('email').errors?.minlength ||\\r\\n                        userCreateForm.get('email').errors?.maxlength ||\\r\\n                        userCreateForm.get('email').errors?.required) &&\\r\\n                        userCreateForm.get('email').touched\\\">\\r\\n                    Довжина повинна бути від 5 до 50 символів\\r\\n                  </mat-error>\\r\\n                  <mat-error *ngIf=\\\"userCreateForm.get('email').errors?.pattern &&\\r\\n                       userCreateForm.get('email').touched\\\">\\r\\n                    Введіть правільну адресу\\r\\n                  </mat-error>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n\\r\\n              <re-captcha [ngClass]=\\\"{'display-none':\\r\\n          !userCreateForm.get('email').valid || !userCreateForm.get('login').valid ||\\r\\n          !userCreateForm.get('password').valid || !userCreateForm.get('passwordConfirm').valid}\\\"\\r\\n                [formControlName]=\\\"'recaptcha'\\\" #recaptchaRef siteKey=\\\"{{config.recaptchaSiteKey}}\\\">\\r\\n              </re-captcha>\\r\\n\\r\\n              <div class=\\\"submit-button-wrapper\\\">\\r\\n                <span fxFlex></span>\\r\\n                <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"!userCreateForm.valid\\\"\\r\\n                  aria-label=\\\"Register\\\">Зареєструватись</button>\\r\\n              </div>\\r\\n\\r\\n            </form>\\r\\n          </mat-card-content>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</div> -->\"","export default \"<lib-login></lib-login>\"","export default \"<lib-password-reset></lib-password-reset>\\r\\n<!-- <div class=\\\"container\\\">\\r\\n\\r\\n<div class=\\\"row\\\" fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\">\\r\\n  <div class=\\\"cell\\\" fxFlex.gt-xs=\\\"20\\\" fxFlex.gt-md=\\\"30\\\"></div>\\r\\n\\r\\n  <div class=\\\"cell\\\" fxFlex.gt-xs=\\\"60\\\" fxFlex.gt-md=\\\"40\\\">\\r\\n\\r\\n    <div class=\\\"item centered-container\\\">\\r\\n      <mat-card class=\\\"form-block\\\">\\r\\n        <mat-card-header>\\r\\n          <mat-card-title>\\r\\n            <h2 class=\\\"mat-h2\\\">Відновлення паролю</h2>\\r\\n          </mat-card-title>\\r\\n        </mat-card-header>\\r\\n\\r\\n        <mat-card-content>\\r\\n          <div class=\\\"padding-bottom\\\" fxLayout fxLayoutAlign=\\\"center center\\\">\\r\\n            <img class=\\\"responsive-image\\\" src=\\\"./assets/images/hmade_logo_dark.svg\\\" width=\\\"367px\\\" alt=\\\"HandMADE\\\">\\r\\n          </div>\\r\\n          <div *ngIf=\\\"processing\\\" class=\\\"row\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n            <div class=\\\"cell\\\" fxFlex=\\\"100\\\">\\r\\n              <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\r\\n            </div>\\r\\n          </div>\\r\\n          <mat-vertical-stepper #stepper linear>\\r\\n            <mat-step [stepControl]=\\\"emailForm\\\" editable=\\\"false\\\" >\\r\\n              <form [formGroup]=\\\"emailForm\\\" validate (submit)=\\\"onEmailSubmit(stepper)\\\">\\r\\n                <ng-template matStepLabel>Введіть свій email</ng-template>\\r\\n                <div fxLayout=\\\"row\\\">\\r\\n                  <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                    <mat-icon color=\\\"primary\\\">mail_outline</mat-icon>\\r\\n                  </div>\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" type=\\\"email\\\" required>\\r\\n\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"(emailForm.get('email').errors?.minlength ||\\r\\n                        emailForm.get('email').errors?.maxlength ||\\r\\n                        emailForm.get('email').errors?.required) &&\\r\\n                        emailForm.get('email').touched\\\">\\r\\n                      Довжина повинна бути від 5 до 30 символів\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"emailForm.get('email').errors?.pattern &&\\r\\n                        emailForm.get('email').touched\\\">\\r\\n                      Введіть правільну адресу\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"emailForm.get('email').errors?.invalidEmail &&\\r\\n                        emailForm.get('email').touched\\\">\\r\\n                      Користувач з такою поштою не зареєстрований\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"emailForm.get('email').errors?.unrecognizedError &&\\r\\n                        emailForm.get('email').touched\\\">\\r\\n                        'Сталася помилка'\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n\\r\\n                <re-captcha [ngClass]=\\\"{'display-none': !emailForm.get('email').valid}\\\"\\r\\n                  [formControlName]=\\\"'recaptcha'\\\" #recaptchaRef\\r\\n                            siteKey=\\\"{{config.recaptchaSiteKey}}\\\">\\r\\n                </re-captcha>\\r\\n                <div>\\r\\n                  <button mat-button [disabled]=\\\"!emailForm.valid || processing\\\" aria-label=\\\"Next\\\">Далі</button>\\r\\n                </div>\\r\\n              </form>\\r\\n            </mat-step>\\r\\n\\r\\n            <mat-step [stepControl]=\\\"codeForm\\\" editable=\\\"false\\\">\\r\\n\\r\\n              <form [formGroup]=\\\"codeForm\\\" (submit)=\\\"onCodeSubmit()\\\">\\r\\n                <ng-template matStepLabel>Введіть код, що надійшов на email</ng-template>\\r\\n                <div fxLayout=\\\"row\\\">\\r\\n                  <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                    <mat-icon color=\\\"primary\\\">settings_ethernet</mat-icon>\\r\\n                  </div>\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Код підтвердження\\\" formControlName=\\\"code\\\" required>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"codeForm.get('code').errors?.required &&\\r\\n                    codeForm.get('code').touched\\\">\\r\\n                      Введіть код\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"codeForm.get('code').errors?.invalidCode &&\\r\\n                        codeForm.get('code').touched\\\">\\r\\n                      Код введено не вірно\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"codeForm.get('code').errors?.maxTries\\\">\\r\\n                      Ви зробили максимальну кількість спроб\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"codeForm.get('code').errors?.unrecognizedError &&\\r\\n                        codeForm.get('code').touched\\\">\\r\\n                      Сталася помилка\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div>\\r\\n                  <button mat-button [disabled]=\\\"!codeForm.valid || processing\\\" aria-label=\\\"Next\\\">Далі</button>\\r\\n                  <button *ngIf=\\\"codeForm.get('code').errors?.maxTries\\\" aria-label=\\\"Refresh\\\"\\r\\n                          mat-button (click)=\\\"refresh()\\\">Оновити сторінку</button>\\r\\n                </div>\\r\\n              </form>\\r\\n            </mat-step>\\r\\n            <mat-step [stepControl]=\\\"passwordForm\\\" editable=\\\"false\\\">\\r\\n              <form [formGroup]=\\\"passwordForm\\\" (submit)=\\\"onPasswordSubmit()\\\">\\r\\n                <ng-template matStepLabel>Введіть новий пароль</ng-template>\\r\\n                <div fxLayout=\\\"row\\\">\\r\\n                  <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                    <mat-icon color=\\\"primary\\\">lock_outline</mat-icon>\\r\\n                  </div>\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Пароль\\\" formControlName=\\\"password\\\"\\r\\n                           required [type]=\\\"hidePassword ? 'password' : 'text'\\\">\\r\\n                    <mat-icon class=\\\"muted\\\" matSuffix (click)=\\\"hidePassword = !hidePassword\\\">\\r\\n                      {{hidePassword ? 'visibility' : 'visibility_off'}}\\r\\n                    </mat-icon>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"(passwordForm.get('password').errors?.minlength ||\\r\\n                          passwordForm.get('password').errors?.maxlength ||\\r\\n                          passwordForm.get('password').errors?.required) &&\\r\\n                          passwordForm.get('password').touched\\\">\\r\\n                      Довжина повинна бути від 6 до 15 символів\\r\\n                    </mat-error>\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"passwordForm.get('password').errors?.pattern &&\\r\\n                         passwordForm.get('password').touched\\\">\\r\\n                      Використовуйте тільки латинські символи та цифри\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n\\r\\n                <div fxLayout=\\\"row\\\">\\r\\n                  <div fxFlexAlign=\\\"center\\\" class=\\\"mat-icon-wrapper\\\">\\r\\n                  </div>\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Підтвердіть пароль\\\" formControlName=\\\"passwordConfirm\\\"\\r\\n                           required [type]=\\\"hidePassword ? 'password' : 'text'\\\">\\r\\n                    <mat-error\\r\\n                      *ngIf=\\\"passwordForm.get('passwordConfirm').errors?.mismatch &&\\r\\n                      passwordForm.get('passwordConfirm').touched\\\">\\r\\n                      Пароль не збігається\\r\\n                    </mat-error>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div>\\r\\n                  <button mat-button [disabled]=\\\"!passwordForm.valid || processing\\\" aria-label=\\\"Finish\\\">Завершити</button>\\r\\n                </div>\\r\\n              </form>\\r\\n            </mat-step>\\r\\n          </mat-vertical-stepper>\\r\\n        </mat-card-content>\\r\\n      </mat-card>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n</div> -->\"","export default \"<lib-profile></lib-profile>\\r\\n<!-- <div class=\\\"container\\\">\\r\\n\\r\\n  <div class=\\\"row\\\" fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\">\\r\\n    <div class=\\\"cell\\\" fxFlex.gt-xs=\\\"20\\\" fxFlex.gt-md=\\\"30\\\"></div>\\r\\n\\r\\n    <div class=\\\"cell\\\" fxFlex.gt-xs=\\\"60\\\" fxFlex.gt-md=\\\"40\\\">\\r\\n\\r\\n      <div class=\\\"item centered-container\\\" *ngIf=\\\"user\\\">\\r\\n        <div class=\\\"info-block mat-elevation-z4\\\">\\r\\n\\r\\n          <div class=\\\"avatar-block\\\">\\r\\n            <form [formGroup]=\\\"changeAvatarForm\\\" (submit)=\\\"onSubmitChangeAvatarForm()\\\">\\r\\n\\r\\n              <div class=\\\"avatar-img-wrapper\\\">\\r\\n                <img *ngIf=\\\"!previewAvatarUrl\\\" src=\\\"{{user.role === 'google' ? \\r\\n              user.avatar :\\r\\n              config.imgPath +\\r\\n              config.cloudinary.cloud_name +\\r\\n              '/c_fill,w_180,h_180,f_auto/' +\\r\\n              user.avatar}}\\\" alt=\\\"avatar\\\">\\r\\n                <img *ngIf=\\\"previewAvatarUrl\\\" src=\\\"{{previewAvatarUrl}}\\\" alt=\\\"avatar\\\">\\r\\n\\r\\n                <div *ngIf=\\\"processingChangeAvatar\\\" class=\\\"avatar-div-processing\\\">\\r\\n                  <div class=\\\"spinner-wrapper\\\">\\r\\n                    <mat-spinner [diameter]=\\\"24\\\"></mat-spinner>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div *ngIf=\\\"!editAvatar && !processingChangeAvatar && restrictTo(['google', 'facebook'])\\\"\\r\\n                  class=\\\"avatar-div-change\\\"></div>\\r\\n                <div *ngIf=\\\"!editAvatar && !processingChangeAvatar && restrictTo(['google', 'facebook'])\\\"\\r\\n                  class=\\\"avatar-button-change\\\">\\r\\n                  <input type=\\\"file\\\" accept=\\\".jpg, .jpe, .jpeg, .bmp, .webp, .png, .gif\\\" (change)=\\\"changeAvatar($event)\\\"\\r\\n                    id=\\\"input-file\\\">\\r\\n                  <label for=\\\"input-file\\\">Змінити\\r\\n                  </label>\\r\\n                </div>\\r\\n\\r\\n                <div *ngIf=\\\"editAvatar && !processingChangeAvatar\\\">\\r\\n                  <div class=\\\"avatar-div-ok\\\">\\r\\n                  </div>\\r\\n                  <div class=\\\"avatar-div-cancel\\\">\\r\\n                  </div>\\r\\n                  <button class=\\\"avatar-button-ok\\\" [disabled]=\\\"!changeAvatarForm.valid\\\" aria-label=\\\"Done\\\">\\r\\n                    <mat-icon>done</mat-icon>\\r\\n                  </button>\\r\\n                  <button type=\\\"button\\\" class=\\\"avatar-button-cancel\\\" (click)=\\\"cancelChangeAvatar()\\\" aria-label=\\\"Cancel\\\">\\r\\n                    <mat-icon>cancel</mat-icon>\\r\\n                  </button>\\r\\n                </div>\\r\\n              </div>\\r\\n            </form>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"info-block-row-wrapper\\\">\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row\\\">\\r\\n              <div class=\\\"info-block-row-title mat-title\\\">{{user.name}} {{user.surname}}</div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"info-block-row-wrapper\\\">\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row\\\">\\r\\n              <div class=\\\"info-block-row-title mat-subheading-1\\\" fxFlex=\\\"40%\\\">Email</div>\\r\\n              <div class=\\\"mat-body-1 muted\\\" fxFlex=\\\"60%\\\">{{user.email}}</div>\\r\\n              <mat-spinner *ngIf=\\\"processing === 'email'\\\" fxFlex=\\\"30px\\\" [diameter]=\\\"24\\\"></mat-spinner>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div *ngIf=\\\"user.role === 'guest' && !verificationSent\\\" class=\\\"info-block-row-wrapper border-0\\\">\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row mail-verification\\\">\\r\\n              <div class=\\\"mat-body-1\\\" fxFlex=\\\"100%\\\">\\r\\n                <p>Пошту не верифіковано, надіслати код.</p>\\r\\n                <p>Деякі функції будуть недоступні. Наприклад, відправка коментарів</p>\\r\\n              </div>\\r\\n              <mat-icon *ngIf=\\\"processing !== 'verification'\\\" fxFlex=\\\"30px\\\" (click)=\\\"onVerificationSend()\\\">mail\\r\\n              </mat-icon>\\r\\n              <mat-spinner *ngIf=\\\"processing === 'verification'\\\" fxFlex=\\\"30px\\\" [diameter]=\\\"24\\\"></mat-spinner>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div *ngIf=\\\"user.role === 'guest' && verificationSent\\\" class=\\\"info-block-row-wrapper border-0\\\">\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row mail-verification\\\">\\r\\n              <div class=\\\"mat-body-1 muted\\\" fxFlex=\\\"100%\\\">На пошту надіслано посилання</div>\\r\\n              <mat-icon *ngIf=\\\"processing !== 'verification'\\\" fxFlex=\\\"30px\\\" class=\\\"muted\\\"\\r\\n                (click)=\\\"onVerificationSend()\\\">refresh</mat-icon>\\r\\n              <mat-spinner *ngIf=\\\"processing === 'verification'\\\" fxFlex=\\\"30px\\\" [diameter]=\\\"24\\\"></mat-spinner>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"info-block-row-wrapper\\\">\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row\\\">\\r\\n              <div class=\\\"info-block-row-title mat-subheading-1\\\" fxFlex=\\\"40%\\\">Ім'я</div>\\r\\n              <div class=\\\"mat-subheading-2 muted\\\" fxFlex=\\\"60%\\\">{{user.name}}</div>\\r\\n              <mat-icon *ngIf=\\\"processing !== 'name' && restrictTo(['google', 'facebook'])\\\" fxFlex=\\\"30px\\\"\\r\\n                (click)=\\\"openDialog(makeNameObject())\\\" class=\\\"muted\\\">edit</mat-icon>\\r\\n              <mat-spinner *ngIf=\\\"processing === 'name'\\\" fxFlex=\\\"30px\\\" [diameter]=\\\"24\\\"></mat-spinner>\\r\\n\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"info-block-row-wrapper\\\">\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row\\\">\\r\\n              <div class=\\\"info-block-row-title mat-subheading-1\\\" fxFlex=\\\"40%\\\">Прізвище</div>\\r\\n              <div class=\\\"mat-subheading-2 muted\\\" fxFlex=\\\"60%\\\">{{user.surname}}</div>\\r\\n              <mat-icon *ngIf=\\\"processing !== 'surname' && restrictTo(['google', 'facebook'])\\\" fxFlex=\\\"30px\\\"\\r\\n                (click)=\\\"openDialog(makeSurnameObject())\\\" class=\\\"muted\\\">edit</mat-icon>\\r\\n              <mat-spinner *ngIf=\\\"processing === 'surname'\\\" fxFlex=\\\"30px\\\" [diameter]=\\\"24\\\"></mat-spinner>\\r\\n\\r\\n            </div>\\r\\n          </div>\\r\\n          <div *ngIf=\\\"restrictTo(['google', 'facebook'])\\\" class=\\\"info-block-row-wrapper\\\">\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"info-block-row\\\">\\r\\n              <div fxFlex=\\\"60%\\\"></div>\\r\\n              <div fxFlex=\\\"40%\\\">\\r\\n                <button mat-button (click)=\\\"openDialog(makePasswordObject())\\\" aria-label=\\\"Change password\\\">\\r\\n                  <span *ngIf=\\\"processing !== 'password'\\\">Змінити пароль</span>\\r\\n                  <mat-spinner *ngIf=\\\"processing === 'password'\\\" [diameter]=\\\"24\\\"></mat-spinner>\\r\\n                </button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div> -->\"","export default \"<div id=\\\"user\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"app-container-h app-container-v\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXNlci9yZWRpcmVjdGlvbi1hZnRlci1vYXV0aC9yZWRpcmVjdGlvbi1hZnRlci1vYXV0aC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, Injector } from '@angular/core';\r\n// import { Router, RouteConfigLoadEnd } from '@angular/router';\r\n// import { NgUserManService } from 'ng-user-man';\r\n// import { filter, take } from 'rxjs/operators';\r\nimport { RedirAfterOauthComponent } from 'ng-user-man';\r\n\r\n@Component({\r\n  selector: 'app-redirection-after-oauth',\r\n  templateUrl: './redirection-after-oauth.component.html',\r\n  styleUrls: ['./redirection-after-oauth.component.scss']\r\n})\r\nexport class RedirectionAfterOauthComponent extends RedirAfterOauthComponent implements OnInit {\r\n\r\n  constructor(\r\n    protected injector: Injector,\r\n\r\n    // private router: Router,\r\n    // private userService: UserService,\r\n  ) {\r\n    super(injector);\r\n   }\r\n\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n    // this.router.events.pipe(\r\n    //   filter((event) => event instanceof RouteConfigLoadEnd),\r\n    //   take(1)\r\n    // )\r\n    //   .subscribe(\r\n    //     (event) => {\r\n    //       this.userService.logging();\r\n    //       this.router.navigate(['/user', 'profile']);\r\n    //     },\r\n    //     (err) => console.log('err', err)\r\n    //   );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXNlci91c2VyLWNyZWF0ZS91c2VyLWNyZWF0ZS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, ViewChild, ElementRef, Injector } from '@angular/core';\r\n// import { FormControl, FormGroup, FormGroupDirective, Validators } from '@angular/forms';\r\n// import { ValidateService } from '../../../services/validate.service';\r\n// import { IUser } from '../../../interfaces/user-interface';\r\n// import { UserService } from '../../../services/user.service';\r\n// import { MatSnackBar } from '@angular/material';\r\n// import { Router } from '@angular/router';\r\n// import { SharedService, ValidateService, NgUserManService } from 'ng-user-man';;\r\n// import { config } from '../../../app.config';\r\n// import { RecaptchaComponent } from 'ng-recaptcha';\r\nimport { CreateComponent } from 'ng-user-man';\r\n\r\n@Component({\r\n  selector: 'app-user-create',\r\n  templateUrl: './user-create.component.html',\r\n  styleUrls: ['./user-create.component.scss']\r\n})\r\n\r\nexport class UserCreateComponent extends CreateComponent implements OnInit {\r\n  // config = config;\r\n  // userCreateForm: FormGroup;\r\n  // hidePassword = true;\r\n  // user: IUser;\r\n\r\n  // /**\r\n  //  * directive for reset form (invalid status)\r\n  //  */\r\n  // @ViewChild(FormGroupDirective, { static: false }) userCreateFormDirective: FormGroupDirective;\r\n  // @ViewChild(RecaptchaComponent, { static: false }) recaptchaRef: RecaptchaComponent;\r\n\r\n  constructor(\r\n    // protected validateService: ValidateService,\r\n    // protected ngUserManService: NgUserManService,\r\n    // protected matSnackBar: MatSnackBar,\r\n    // protected router: Router,\r\n    protected injector: Injector,\r\n  ) {\r\n    super(\r\n      // validateService,\r\n      // ngUserManService,\r\n      // matSnackBar,\r\n      // router,\r\n      injector\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n    \r\n    // const emailPattern = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\n\r\n    // this.userCreateForm = new FormGroup({\r\n    //   login: new FormControl('', [\r\n    //     Validators.required,\r\n    //     Validators.minLength(4),\r\n    //     Validators.maxLength(15),\r\n    //     Validators.pattern('[a-zA-Z0-9]+'),\r\n    //   ]),\r\n    //   password: new FormControl('', [\r\n    //     Validators.required,\r\n    //     Validators.minLength(6),\r\n    //     Validators.maxLength(15),\r\n    //     Validators.pattern('[a-zA-Z0-9]+'),\r\n    //   ]),\r\n    //   passwordConfirm: new FormControl('', [\r\n    //     Validators.required,\r\n    //   ]),\r\n    //   name: new FormControl('', [\r\n    //     Validators.required,\r\n    //     Validators.minLength(2),\r\n    //     Validators.maxLength(20),\r\n    //     Validators.pattern('[a-zA-Z0-9а-яА-ЯіїєІЇЄ\\' ]+'),\r\n    //   ]),\r\n    //   surname: new FormControl('', [\r\n    //     Validators.required,\r\n    //     Validators.minLength(2),\r\n    //     Validators.maxLength(20),\r\n    //     Validators.pattern('[a-zA-Z0-9а-яА-ЯіїєІЇЄ\\' ]+'),\r\n    //   ]),\r\n    //   email: new FormControl('', [\r\n    //     Validators.required,\r\n    //     Validators.minLength(5),\r\n    //     Validators.maxLength(50),\r\n    //     Validators.pattern(emailPattern),\r\n    //   ]),\r\n    //   recaptcha: new FormControl('', [\r\n    //     Validators.required\r\n    //   ])\r\n    // },\r\n    //   this.validateService.matchPassword\r\n    // );\r\n  }\r\n\r\n  // onUserCreateSubmit() {\r\n  //   this.user = <IUser>{\r\n  //     login: this.userCreateForm.get('login').value,\r\n  //     password: this.userCreateForm.get('password').value,\r\n  //     email: this.userCreateForm.get('email').value,\r\n  //     name: this.userCreateForm.get('name').value,\r\n  //     surname: this.userCreateForm.get('surname').value\r\n  //   };\r\n  //   // create user\r\n  //   this.userService.userCreate(this.user, this.userCreateForm.get('recaptcha').value)\r\n  //     .subscribe(\r\n  //       result => {\r\n  //         const token = result;\r\n  //         this.resetForm();\r\n  //         this.matSnackBar.open('Користувача створено, вхід виконано', '', { duration: 3000 });\r\n  //         // login new user\r\n  //         this.userService.logging();\r\n  //         this.router.navigate(['/user', 'profile']);\r\n  //       },\r\n  //       err => {\r\n  //         // 422 or 400\r\n  //         this.recaptchaRef.reset();\r\n  //         this.matSnackBar.open(err.error.message || 'Сталася помилка', '',\r\n  //           { duration: 3000, panelClass: 'snack-bar-danger' });\r\n  //       }\r\n  //     );\r\n  // }\r\n\r\n\r\n  // onUserCreateReset() {\r\n  //   this.resetForm();\r\n  //   // MAKE redirect\r\n  // }\r\n\r\n  // resetForm() {\r\n  //   if (this.userCreateFormDirective) {\r\n  //     this.userCreateFormDirective.resetForm();\r\n  //   }\r\n  // }\r\n}\r\n\r\n\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXNlci91c2VyLWxvZ2luL3VzZXItbG9naW4uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, Injector } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { Router } from '@angular/router';\r\nimport { SharedService } from 'ng-user-man';\r\nimport { LoginComponent } from 'ng-user-man';\r\n// import { NgUserManService } from 'ng-user-man';\r\n\r\n@Component({\r\n  selector: 'app-user-login',\r\n  templateUrl: './user-login.component.html',\r\n  styleUrls: ['./user-login.component.scss']\r\n})\r\nexport class UserLoginComponent extends LoginComponent implements OnInit {\r\n\r\n  constructor(\r\n    // protected sharedService: SharedService,\r\n    // protected matSnackBar: MatSnackBar,\r\n    // protected router: Router,\r\n    protected injector: Injector,\r\n    // protected ngUserManService: NgUserManService,\r\n  ) {\r\n    super(\r\n      // matSnackBar,\r\n      // ngUserManService,\r\n      // sharedService,\r\n      injector,\r\n      // router\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXNlci91c2VyLXBhc3N3b3JkLXJlc2V0L3VzZXItcGFzc3dvcmQtcmVzZXQuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component,  OnInit, ViewChild, Injector } from '@angular/core';\r\n// import { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\n// import { UserService } from '../../../services/user.service';\r\n// import { ValidateService } from '../../../services/validate.service';\r\n// import { MatSnackBar, MatStepper } from '@angular/material';\r\n// import { Router } from '@angular/router';\r\n// import { config } from '../../../app.config';\r\nimport { PasswordResetComponent } from 'ng-user-man';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-password-reset',\r\n  templateUrl: './user-password-reset.component.html',\r\n  styleUrls: ['./user-password-reset.component.scss']\r\n})\r\n\r\nexport class UserPasswordResetComponent extends PasswordResetComponent implements OnInit {\r\n  // config = config;\r\n  // emailForm: FormGroup;\r\n  // codeForm: FormGroup;\r\n  // passwordForm: FormGroup;\r\n  // hidePassword = true;\r\n  // processing = false;\r\n  // // result = false;\r\n  // error: {};\r\n  // @ViewChild('stepper', { static: false }) matStepper: MatStepper;\r\n  // @ViewChild('recaptchaRef', { static: false }) recaptchaRef;\r\n\r\n  constructor(\r\n    protected injector: Injector,\r\n    // private userService: UserService,\r\n    // private validateService: ValidateService,\r\n    // private matSnackBar: MatSnackBar,\r\n    // private router: Router,\r\n    // private sharedService: SharedService,\r\n  ) { \r\n    super(injector);\r\n  }\r\n\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n    // const emailPattern = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\n\r\n    // this.emailForm = new FormGroup({\r\n    //   email: new FormControl('', [\r\n    //     Validators.required,\r\n    //     Validators.minLength(5),\r\n    //     Validators.maxLength(30),\r\n    //     Validators.pattern(emailPattern),\r\n    //   ]),\r\n    //   recaptcha: new FormControl('', [\r\n    //     Validators.required\r\n    //   ])\r\n    //   },\r\n    // );\r\n\r\n    // this.codeForm = new FormGroup({\r\n    //     code: new FormControl('', [\r\n    //       Validators.required,\r\n    //     ]),\r\n    //   },\r\n    // );\r\n\r\n    // this.passwordForm = new FormGroup({\r\n    //     password: new FormControl('', [\r\n    //       Validators.required,\r\n    //       Validators.minLength(6),\r\n    //       Validators.maxLength(15),\r\n    //       Validators.pattern('[a-zA-Z0-9]+'),\r\n    //     ]),\r\n    //     passwordConfirm: new FormControl('', [\r\n    //       Validators.required,\r\n    //     ]),\r\n    //   },\r\n    //   this.validateService.matchPassword\r\n    // );\r\n  }\r\n\r\n  // onEmailSubmit(stepper) {\r\n  //   this.processing = true;\r\n  //   this.userService.userLocalRemoveToken('token');\r\n  //   this.userService.userLocalRemoveToken('codeToken');\r\n  //   this.userService.userLocalRemoveToken('passwordResetToken');\r\n\r\n  //   const email = this.emailForm.get('email').value;\r\n  //   const recaptcha = this.emailForm.get('recaptcha').value;\r\n  //   this.userService.userPasswordResetEmail(email, recaptcha)\r\n  //     .subscribe(\r\n  //       result => {\r\n  //         this.processing = false;\r\n  //         this.emailForm.get('email').setErrors(null);\r\n  //         this.matStepper.next();\r\n  //         const codeToken = result;\r\n  //         this.userService.userLocalSetToken('codeToken', codeToken);\r\n  //       },\r\n  //       err => {\r\n  //         this.processing = false;\r\n  //         if (err.error.code === 'wrongCredentials') {\r\n  //           this.emailForm.get('email').setErrors({invalidEmail: true});\r\n  //         } else {\r\n  //           this.matStepper.reset();\r\n  //           this.matSnackBar.open('Сталася помилка', '',\r\n  //           {duration: 3000, panelClass: 'snack-bar-danger'});\r\n  //         }\r\n  //       }\r\n  //     );\r\n  // }\r\n\r\n  // onCodeSubmit() {\r\n  //   this.processing = true;\r\n  //   const code = this.codeForm.get('code').value;\r\n\r\n  //   const codeToken = this.userService.userLocalGetToken('codeToken');\r\n  //   this.userService.userPasswordResetCode(code, codeToken)\r\n  //     .subscribe(\r\n  //       passwordResetToken => {\r\n  //         this.processing = false;\r\n  //         this.codeForm.get('code').setErrors(null);\r\n  //         this.matStepper.next();\r\n  //         this.userService.userLocalRemoveToken('codeToken');\r\n  //         this.userService.userLocalSetToken('passwordResetToken', passwordResetToken);\r\n  //       },\r\n  //       err => {\r\n  //         this.processing = false;\r\n  //         if (err.error.code === 'wrongCredentials') {\r\n  //           this.codeForm.get('code').setErrors({invalidCode: true});\r\n  //         } else if (err.error.code === 'maxTries') {\r\n  //           this.codeForm.get('code').setErrors({maxTries: true});\r\n  //           this.codeForm.setValidators(this.validateService.maxTries);\r\n  //           setTimeout(() => {\r\n  //             this.router.navigate(['/']);\r\n  //           }, 3000);\r\n  //             this.matSnackBar.open('Код невірний, спрпобуйте пізніше', '',\r\n  //             {duration: 4000, panelClass: 'snack-bar-danger'});\r\n\r\n  //         } else {\r\n  //           this.codeForm.get('code').setErrors({unrecognizedError: true});\r\n  //         }\r\n  //       }\r\n  //     );\r\n  // }\r\n\r\n  // refresh() {\r\n  //   // TODO: make refresh logic\r\n  //   console.log('refresh');\r\n  // }\r\n\r\n  // onPasswordSubmit() {\r\n  //   this.processing = true;\r\n  //   const password = this.passwordForm.get('password').value;\r\n\r\n  //   const passwordResetToken = this.userService.userLocalGetToken('passwordResetToken');\r\n\r\n  //   this.userService.userPasswordReset(password, passwordResetToken)\r\n  //     .subscribe(result => {\r\n  //         // const token = result;\r\n  //         this.processing = false;\r\n  //         this.userService.userLocalRemoveToken('passwordResetToken');\r\n  //         this.userService.logging();\r\n  //         this.sharedService.sharingEventToReloadComments();\r\n  //         this.router.navigate(['/user', 'profile']);\r\n  //         this.matSnackBar.open('Пароль відновлено', '',\r\n  //           {duration: 3000, panelClass: 'snack-bar-danger'});\r\n  //       },\r\n  //       err => {\r\n  //         this.processing = false;\r\n  //         this.matSnackBar.open(err.error.message || 'Сталася помилка', '',\r\n  //           {duration: 3000, panelClass: 'snack-bar-danger'});\r\n  //       }\r\n  //     );\r\n  // }\r\n\r\n  // goHomePage() {\r\n  //   this.router.navigate(['/']);\r\n  // }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXNlci91c2VyLXByb2ZpbGUvdXNlci1wcm9maWxlLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, Injector } from '@angular/core';\r\n// import { UserService } from '../../../services/user.service';\r\n// import { IUser } from '../../../interfaces/user-interface';\r\n// import { config } from '../../../app.config';\r\n// import { MatDialog, MatSnackBar } from '@angular/material';\r\n// import { Router } from '@angular/router';\r\n// import { UserDialogComponent } from '../user-dialog/user-dialog.component';\r\n// import { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\n// import { of } from 'rxjs';\r\n// import { mergeMap } from 'rxjs/operators';\r\nimport { ProfileComponent } from 'ng-user-man';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-profile',\r\n  templateUrl: './user-profile.component.html',\r\n  styleUrls: ['./user-profile.component.scss']\r\n})\r\nexport class UserProfileComponent extends ProfileComponent implements OnInit {\r\n\r\n  // config = config;\r\n  // user: IUser;\r\n  // processing: string;\r\n  // changeAvatarForm: FormGroup;\r\n  // editAvatar = false;\r\n  // previewAvatarUrl;\r\n  // processingChangeAvatar = false;\r\n  // verificationSent = false;\r\n\r\n  constructor(\r\n    protected injector: Injector,\r\n    // private userService: UserService,\r\n    // private matSnackBar: MatSnackBar,\r\n    // private router: Router,\r\n    // public dialog: MatDialog,\r\n  ) {\r\n    super(injector);\r\n  }\r\n\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n    // this.getProfile();\r\n\r\n    // this.changeAvatarForm = new FormGroup({\r\n    //   file : new FormControl('', [\r\n    //     Validators.required,\r\n    //     Validators.minLength(4),\r\n    //   ]),\r\n    // });\r\n  }\r\n\r\n  // allowTo(permitedRole: string): boolean {\r\n  //   return this.userService.allowTo(permitedRole);\r\n  // }\r\n\r\n  // restrictTo(restrictedRoles: string[]): boolean {\r\n  //   return this.userService.restrictTo(restrictedRoles);\r\n  // }\r\n\r\n  // onVerificationSend() {\r\n  //   this.verificationSent = true;\r\n  //   this.processing = 'verification';\r\n  //   this.userService.userEmailVerification()\r\n  //     .subscribe((result) => {\r\n  //       this.processing = '';\r\n  //       this.matSnackBar.open(result, '',\r\n  //         {duration: 3000});\r\n  //     },\r\n  //       (err) => {\r\n  //         this.processing = '';\r\n  //         this.matSnackBar.open(err.error || 'Помилка', '',\r\n  //           {duration: 3000, panelClass: 'snack-bar-danger'});\r\n  //       }\r\n\r\n  //     );\r\n  // }\r\n\r\n  // onSubmitChangeAvatarForm() {\r\n  //   this.processingChangeAvatar = true;\r\n  //   this.userService.userEditAvatar(this.changeAvatarForm.get('file').value)\r\n  //     .subscribe(result => {\r\n  //       this.matSnackBar.open(result, '',\r\n  //           {duration: 3000});\r\n  //       this.getProfile();\r\n  //       this.previewAvatarUrl = null;\r\n  //       this.processingChangeAvatar = false;\r\n  //       this.editAvatar = false;\r\n  //     },\r\n  //       err =>\r\n  //         this.matSnackBar.open(err.error.message || 'Помилка', '',\r\n  //           {duration: 3000, panelClass: 'snack-bar-danger'})\r\n  //     );\r\n  // }\r\n\r\n  // changeAvatar(event) {\r\n  //   this.editAvatar = true;\r\n  //   const checkFile = this.userService.checkFile(event.target);\r\n\r\n  //   if (!checkFile.success) {\r\n  //     this.cancelChangeAvatar();\r\n  //     this.matSnackBar.open(checkFile.message || 'Помилка', '',\r\n  //       {duration: 3000, panelClass: 'snack-bar-danger'});\r\n  //   } else {\r\n  //     this.changeAvatarForm.get('file').setValue(event.target.files[0]);\r\n\r\n  //     const reader = new FileReader();\r\n\r\n  //     reader.addEventListener('load', (readerEvent: any) => {\r\n  //       // .jpg, .jpe, .jpeg, .bmp, .webp, .png\r\n  //       this.previewAvatarUrl = readerEvent.target.result;\r\n  //     });\r\n\r\n  //     reader.readAsDataURL(event.target.files[0]);\r\n  //   }\r\n  // }\r\n\r\n  // cancelChangeAvatar() {\r\n  //   this.changeAvatarForm.get('file').setValue(null);\r\n  //   this.editAvatar = false;\r\n  //   this.previewAvatarUrl = null;\r\n  // }\r\n\r\n  // getProfile(): void {\r\n  //   this.userService.userGetProfile()\r\n  //     .subscribe(\r\n  //       user => {\r\n  //         this.user = user;\r\n  //       },\r\n  //       err => {\r\n  //         this.matSnackBar.open(err.error, '',\r\n  //           {duration: 3000, panelClass: 'snack-bar-danger'});\r\n  //         this.router.navigate(['/user', 'login']);\r\n  //       }\r\n  //     );\r\n  // }\r\n\r\n  // openDialog(object): void {\r\n\r\n  //   const dialogRef = this.dialog.open(UserDialogComponent, {\r\n  //     width: '400px',\r\n  //     data: object,\r\n  //   });\r\n\r\n  //   dialogRef.afterClosed().pipe(\r\n  //     mergeMap(result => {\r\n  //       if (result) {\r\n  //         return this.userService.userEdit(result);\r\n  //       } else {\r\n  //         return of(null);\r\n  //       }\r\n  //     })\r\n  //   )\r\n  //     .subscribe(result => {\r\n  //         this.processing = null;\r\n  //         if (!result) {\r\n  //           // didn't get data from dialog\r\n  //           return;\r\n  //         } else {\r\n  //           this.matSnackBar.open(result, '',\r\n  //             {duration: 3000});\r\n  //           this.getProfile();\r\n  //         }\r\n  //       },\r\n  //       err => {\r\n  //         this.processing = null;\r\n  //         this.matSnackBar.open(err.error.message || 'Помилка', '',\r\n  //           {duration: 3000, panelClass: 'snack-bar-danger'});\r\n  //       }\r\n  //     );\r\n  // }\r\n\r\n  // makePasswordObject() {\r\n  //   this.processing = 'password';\r\n  //   return {\r\n  //     payload: [{\r\n  //       name: 'password',\r\n  //       label: 'Новий пароль',\r\n  //       type: 'password',\r\n  //       icon: 'lock_outline',\r\n  //       validators: [\r\n  //         {\r\n  //           name: 'length',\r\n  //           message: 'Довжина повинна бути від 6 до 15 символів'\r\n  //         },\r\n  //         {\r\n  //           name: 'pattern',\r\n  //           message : 'Використовуйте тільки латинські символи та цифри'\r\n  //         },\r\n  //       ],\r\n  //     },\r\n  //     {\r\n  //       name: 'passwordConfirm',\r\n  //       label: 'Підтвердіть пароль',\r\n  //       type: 'password',\r\n  //       icon: '',\r\n  //       validators: [\r\n  //         {\r\n  //           name: 'require',\r\n  //           message : 'Це поле не може бути пустим'\r\n  //         },\r\n  //         {\r\n  //           name: 'match',\r\n  //           message : 'Пароль не збігається'\r\n  //         },\r\n  //       ]\r\n  //     },\r\n  //     {\r\n  //       name: 'passwordCurrent',\r\n  //       label: 'Діючий пароль',\r\n  //       type: 'password',\r\n  //       icon: '',\r\n  //       validators: [\r\n  //         {\r\n  //           name: 'require',\r\n  //           message : 'Це поле не може бути пустим'\r\n  //         }\r\n  //       ],\r\n  //     }],\r\n\r\n  //     initForm: function(): FormGroup {\r\n  //       return new FormGroup({\r\n  //         password: new FormControl('', [\r\n  //           Validators.required,\r\n  //           Validators.minLength(6),\r\n  //           Validators.maxLength(15),\r\n  //           Validators.pattern('[a-zA-Z0-9]+'),\r\n  //         ]),\r\n  //         passwordConfirm: new FormControl('', [\r\n  //           Validators.required,\r\n  //         ]),\r\n  //         passwordCurrent: new FormControl('', [\r\n  //           Validators.required,\r\n  //         ]),\r\n  //       },\r\n  //         function matchPassword(abstractControl: AbstractControl) {\r\n  //         const password = abstractControl.get('password').value;\r\n  //         const passwordConfirm = abstractControl.get('passwordConfirm').value;\r\n  //           if (password === passwordConfirm) {\r\n  //           abstractControl.get('passwordConfirm').setErrors(null);\r\n  //           return null;\r\n  //         } else {\r\n  //           abstractControl.get('passwordConfirm').setErrors({mismatch: true});\r\n  //           return null;\r\n  //         }\r\n  //       });\r\n  //     }\r\n  //   };\r\n  // }\r\n\r\n  // // makeEmailObject() {\r\n  // //   this.processing = 'email';\r\n  // //   const emailPattern = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\n  // //   return {\r\n  // //     payload: [{\r\n  // //       name: 'email',\r\n  // //       label: 'Email',\r\n  // //       type: 'email',\r\n  // //       icon: 'mail_outline',\r\n  // //       oldValue: this.user.email,\r\n  // //       validators: [\r\n  // //         {\r\n  // //           name: 'length',\r\n  // //           message: 'Довжина повинна бути від 5 до 30 символів'\r\n  // //         },\r\n  // //         {\r\n  // //           name: 'pattern',\r\n  // //           message: 'Введіть правільну адресу'\r\n  // //         }\r\n  // //       ],\r\n  // //       },\r\n  // //       {\r\n  // //       name: 'passwordCurrent',\r\n  // //       label: 'Введіть пароль',\r\n  // //       type: 'password',\r\n  // //       icon: '',\r\n  // //       validators: [\r\n  // //         {\r\n  // //           name: 'require',\r\n  // //           message : 'Це поле не може бути пустим'\r\n  // //         }\r\n  // //       ],\r\n  // //     }],\r\n  // //     initForm: function () {\r\n  // //       return new FormGroup({\r\n  // //         email: new FormControl('', [\r\n  // //           Validators.required,\r\n  // //           Validators.minLength(5),\r\n  // //           Validators.maxLength(30),\r\n  // //           Validators.pattern(emailPattern),\r\n  // //         ]),\r\n  // //         passwordCurrent: new FormControl('', [\r\n  // //           Validators.required,\r\n  // //         ]),\r\n  // //       });\r\n  // //     },\r\n  // //   };\r\n  // // }\r\n\r\n  // makeNameObject() {\r\n  //   this.processing = 'name';\r\n  //   return {\r\n  //     payload: [{\r\n  //       name: 'name',\r\n  //       label: 'Ім\\'я',\r\n  //       type: '',\r\n  //       icon: 'perm_identity',\r\n  //       oldValue: this.user.name,\r\n  //       validators: [\r\n  //         {\r\n  //           name: 'length',\r\n  //           message: 'Довжина повинна бути від 2 до 20 символів'\r\n  //         },\r\n  //         {\r\n  //           name: 'pattern',\r\n  //           message: 'Використовуйте букви і цифри'\r\n  //         }\r\n  //       ],\r\n  //     },\r\n  //       {\r\n  //         name: 'passwordCurrent',\r\n  //         label: 'Введіть пароль',\r\n  //         type: 'password',\r\n  //         icon: '',\r\n  //         validators: [\r\n  //           {\r\n  //             name: 'require',\r\n  //             message : 'Це поле не може бути пустим'\r\n  //           }\r\n  //         ],\r\n  //       }],\r\n  //     initForm: function () {\r\n  //       return new FormGroup({\r\n  //         name: new FormControl('', [\r\n  //           Validators.minLength(2),\r\n  //           Validators.maxLength(20),\r\n  //           Validators.pattern('[a-zA-Z0-9а-яА-ЯіїєІЇЄ\\' ]+'),\r\n  //         ]),\r\n  //         passwordCurrent: new FormControl('', [\r\n  //           Validators.required,\r\n  //         ]),\r\n  //       });\r\n  //     },\r\n  //   };\r\n  // }\r\n\r\n  // makeSurnameObject() {\r\n  //   this.processing = 'surname';\r\n  //   return {\r\n  //     payload: [{\r\n  //       name: 'surname',\r\n  //       label: 'Прізвище',\r\n  //       type: '',\r\n  //       icon: 'perm_identity',\r\n  //       oldValue: this.user.surname,\r\n  //       validators: [\r\n  //         {\r\n  //           name: 'length',\r\n  //           message: 'Довжина повинна бути від 2 до 20 символів'\r\n  //         },\r\n  //         {\r\n  //           name: 'pattern',\r\n  //           message: 'Використовуйте букви і цифри'\r\n  //         }\r\n  //       ],\r\n  //     },\r\n  //       {\r\n  //         name: 'passwordCurrent',\r\n  //         label: 'Введіть пароль',\r\n  //         type: 'password',\r\n  //         icon: '',\r\n  //         validators: [\r\n  //           {\r\n  //             name: 'require',\r\n  //             message : 'Це поле не може бути пустим'\r\n  //           }\r\n  //         ],\r\n  //       }],\r\n  //     initForm: function () {\r\n  //       return new FormGroup({\r\n  //         surname: new FormControl('', [\r\n  //           Validators.minLength(2),\r\n  //           Validators.maxLength(20),\r\n  //           Validators.pattern('[a-zA-Z0-9а-яА-ЯіїєІЇЄ\\' ]+'),\r\n  //         ]),\r\n  //         passwordCurrent: new FormControl('', [\r\n  //           Validators.required,\r\n  //         ]),\r\n  //       });\r\n  //     },\r\n  //   };\r\n  // }\r\n}\r\n","import { Routes, RouterModule } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { UserComponent } from './user.component';\r\nimport { UserCreateComponent } from './user-create/user-create.component';\r\nimport { UserLoginComponent } from './user-login/user-login.component';\r\nimport { UserProfileComponent } from './user-profile/user-profile.component';\r\nimport { UserPasswordResetComponent } from './user-password-reset/user-password-reset.component';\r\nimport { AuthGuard } from 'ng-user-man';\r\nimport { NoAuthGuard } from 'ng-user-man';\r\nimport { Page404Component } from '../shared/page-404/page-404.component';\r\nimport { RedirectionAfterOauthComponent } from './redirection-after-oauth/redirection-after-oauth.component';\r\n\r\nconst userRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserComponent,\r\n    children: [\r\n      {\r\n        path: 'create',\r\n        component: UserCreateComponent,\r\n        // canActivate: [AuthGuard],\r\n        // data: { auth: 'manager' },\r\n      },\r\n      {\r\n        path: 'login',\r\n        component: UserLoginComponent,\r\n        canActivate: [NoAuthGuard],\r\n        data: {auth: ['guest', 'user', 'manager', 'admin', 'google', 'facebook']},\r\n      },\r\n      {\r\n        path: 'profile',\r\n        component: UserProfileComponent,\r\n        canActivate: [AuthGuard],\r\n        data: {auth: 'guest'},\r\n      },\r\n      {\r\n        path: 'password-reset',\r\n        component: UserPasswordResetComponent,\r\n      },\r\n      {\r\n        path: 'redirection-after-oauth',\r\n        component: RedirectionAfterOauthComponent,\r\n      },\r\n      { path: '', component: Page404Component },\r\n\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(\r\n      userRoutes\r\n    )],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class UserRoutingModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXNlci91c2VyLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-user',\r\n  templateUrl: './user.component.html',\r\n  styleUrls: ['./user.component.scss']\r\n})\r\nexport class UserComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserComponent } from './user.component';\r\nimport { UserRoutingModule } from './user-routing.module';\r\nimport { UserCreateComponent } from './user-create/user-create.component';\r\nimport { UserLoginComponent } from './user-login/user-login.component';\r\nimport { MaterialModule } from '../../material.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { UserProfileComponent } from './user-profile/user-profile.component';\r\n// import { UserDialogComponent } from './user-dialog/user-dialog.component';\r\nimport { UserPasswordResetComponent } from './user-password-reset/user-password-reset.component';\r\nimport { RecaptchaModule, RecaptchaFormsModule } from 'ng-recaptcha';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { RedirectionAfterOauthComponent } from './redirection-after-oauth/redirection-after-oauth.component';\r\nimport { NgUserManModule } from 'ng-user-man';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UserComponent,\r\n    UserCreateComponent,\r\n    UserLoginComponent,\r\n    UserProfileComponent,\r\n    // UserDialogComponent,\r\n    UserPasswordResetComponent,\r\n    RedirectionAfterOauthComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    UserRoutingModule,\r\n    MaterialModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    RecaptchaModule,\r\n    RecaptchaFormsModule,\r\n    SharedModule,\r\n    NgUserManModule\r\n  ],\r\n  exports: [\r\n  ],\r\n  // entryComponents: [\r\n  //   UserDialogComponent,\r\n  // ]\r\n})\r\n\r\nexport class UserModule { }\r\n"],"sourceRoot":"webpack:///"}